/*!
 * @pluginjs/decorator v0.7.18 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@pluginjs/is'), require('@pluginjs/global-component'), require('@pluginjs/factory'), require('@pluginjs/utils'), require('@pluginjs/dom'), require('@pluginjs/events'), require('@pluginjs/i18n')) :
  typeof define === 'function' && define.amd ? define(['exports', '@pluginjs/is', '@pluginjs/global-component', '@pluginjs/factory', '@pluginjs/utils', '@pluginjs/dom', '@pluginjs/events', '@pluginjs/i18n'], factory) :
  (global = global || self, factory(global['@pluginjs/decorator'] = {}, global['@pluginjs/is'], global['@pluginjs/global-component'], global['@pluginjs/factory'], global['@pluginjs/utils'], global['@pluginjs/dom'], global['@pluginjs/events'], global['@pluginjs/i18n']));
}(this, function (exports, is, GlobalComponent, Pj, utils, dom, events, I18N) { 'use strict';

  GlobalComponent = GlobalComponent && GlobalComponent.hasOwnProperty('default') ? GlobalComponent['default'] : GlobalComponent;
  Pj = Pj && Pj.hasOwnProperty('default') ? Pj['default'] : Pj;
  I18N = I18N && I18N.hasOwnProperty('default') ? I18N['default'] : I18N;

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(source, true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(source).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function register(name) {
    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return function (plugin) {
      var _obj$methods = obj.methods,
          methods = _obj$methods === void 0 ? [] : _obj$methods,
          _obj$dependencies = obj.dependencies,
          dependencies = _obj$dependencies === void 0 ? {} : _obj$dependencies,
          others = _objectWithoutProperties(obj, ["methods", "dependencies"]);

      Pj.register(name, Object.assign(plugin, _objectSpread2({
        methods: plugin.methods ? utils.deepMerge(plugin.methods, methods) : methods,
        dependencies: plugin.dependencies ? utils.deepMerge(plugin.dependencies, dependencies) : dependencies
      }, others)));
      var instances = [];
      plugin.prototype.plugin = name;

      plugin.getInstances = function () {
        return instances;
      };

      plugin.addInstance = function (instance) {
        if (!(plugin.prototype instanceof GlobalComponent)) {
          dom.setData(name, instance, instance.element);
        }

        instance.instanceId = utils.getUID(instance.plugin);
        instances.push(instance);
      };

      plugin.removeInstance = function (instance) {
        if (!(plugin.prototype instanceof GlobalComponent)) {
          dom.removeData(name, instance.element);
        }

        instances = instances.filter(function (i) {
          return i !== instance;
        });
      };

      plugin.findInstanceByElement = function (el) {
        return instances.find(function (plugin) {
          return plugin.element === el;
        });
      };

      if (plugin.prototype.resize && typeof plugin.resize === 'undefined') {
        plugin.resize = function (documentWidth, documentHeight) {
          for (var i = 0; i < instances.length; i++) {
            instances[i].resize(documentWidth, documentHeight);
          }
        };
      }

      if (is.isFunction(plugin.resize)) {
        Pj.emitter.on('resize', function (e, documentWidth, documentHeight) {
          plugin.resize(documentWidth, documentHeight);
        });
      }

      if (plugin.prototype instanceof GlobalComponent) {
        Pj[name] = plugin;
      } else {
        var elementParse = function elementParse(selector) {
          if (typeof selector === 'string') {
            return Array.from(document.querySelectorAll(selector));
          }

          if (selector instanceof NodeList || selector instanceof HTMLCollection) {
            return Array.from(selector);
          }

          if (selector instanceof Node) {
            return Array.of(selector);
          }

          if (is.isArray(selector)) {
            return selector;
          }

          return [];
        };

        Pj[name] = function (selector, options) {
          for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            args[_key - 2] = arguments[_key];
          }

          var elements = elementParse(selector);

          if (!elements.length) {
            throw new Error('Element is not exists.');
          }

          var results = [];

          if (is.isString(options)) {
            if (!plugin.methods.includes(options)) {
              throw new Error("Method \"".concat(options, "\" is not exists on \"").concat(name, "\"."));
            }

            results = elements.map(function (el) {
              var instance = dom.getData(name, el);

              if (instance instanceof plugin) {
                return instance[options].apply(instance, args);
              }

              return null;
            });
          } else {
            results = elements.map(function (el) {
              return plugin.of(el, options);
            });
          }

          if (results.length === 1) {
            return results[0];
          }

          return results;
        };

        Object.setPrototypeOf(Pj[name], plugin);
      }

      return plugin;
    };
  }

  function eventable() {
    var events$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return function (plugin) {
      plugin.events = events$1;

      plugin.setEvents = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        plugin.events = utils.deepMerge(plugin.events, options);
      };

      plugin.prototype.eventName = function (events) {
        if (is.isUndefined(events)) {
          return ".".concat(this.plugin);
        }

        if (!is.isArray(events)) {
          events = events.split(' ');
        }

        var length = events.length;

        for (var i = 0; i < length; i++) {
          events[i] = "".concat(events[i], ".").concat(this.plugin);
        }

        return events.join(' ');
      };

      plugin.prototype.eventNameWithId = function (events, instanceId) {
        instanceId = instanceId ? instanceId : this.instanceId;

        if (is.isUndefined(events)) {
          return ".".concat(this.plugin, "-").concat(instanceId);
        }

        if (!is.isArray(events)) {
          events = events.split(' ');
        }

        var length = events.length;

        for (var i = 0; i < length; i++) {
          events[i] = "".concat(events[i], ".").concat(this.plugin, "-").concat(instanceId);
        }

        return events.join(' ');
      };

      plugin.prototype.trigger = function (eventType) {
        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          params[_key - 1] = arguments[_key];
        }

        if (eventType instanceof Event) {
          events.trigger(eventType, this.element);
          eventType = eventType.type;
        } else {
          events.trigger.apply(void 0, [this.selfEventName(eventType), this].concat(params, [this.element]));
        }

        eventType = utils.camelize(eventType);
        var onFunction = "on".concat(eventType);

        if (!is.isUndefined(this.options) && !is.isUndefined(this.options[onFunction]) && is.isFunction(this.options[onFunction])) {
          this.options[onFunction].apply(this, params);
        }
      };

      plugin.prototype.selfEventName = function (events) {
        if (!is.isArray(events)) {
          events = events.split(' ');
        }

        var length = events.length;

        for (var i = 0; i < length; i++) {
          events[i] = "".concat(this.plugin, ":").concat(events[i]);
        }

        return events.join(' ');
      };
    };
  }

  function stateable() {
    return function (plugin) {
      plugin.prototype.setupStates = function () {
        var states = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        this._states = states;
      }; // Checks whether the plugin is in a specific state or not.


      plugin.prototype.is = function (state) {
        if (this._states[state] && this._states[state] > 0) {
          return true;
        }

        return false;
      }; // Enters a state.


      plugin.prototype.enter = function (state) {
        if (typeof this._states[state] === 'undefined') {
          this._states[state] = 0;
        } // this._states[state]++;


        this._states[state] = 1;
      }; // Leaves a state.


      plugin.prototype.leave = function (state) {
        if (typeof this._states[state] === 'undefined') {
          this._states[state] = 0;
        } // this._states[state]--;


        this._states[state] = 0;
      };
    };
  }

  function styleable() {
    var classes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return function (plugin) {
      plugin.classes = classes;

      plugin.setClasses = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        plugin.classes = utils.deepMerge(plugin.classes, options);
      };

      plugin.prototype.getClass = function (classname, arg, value) {
        if (typeof arg !== 'undefined') {
          return this.getClass(classname.replace("{".concat(arg, "}"), value));
        }

        return classname.replace('{namespace}', this.classes.NAMESPACE || '');
      };

      plugin.prototype.getClasses = function (classname, arg, value) {
        if (is.isString(value) && typeof classname !== 'undefined' && typeof arg !== 'undefined') {
          value = value.split(' ');

          for (var i = 0; i < value.length; i++) {
            value[i] = this.getClass(classname, arg, value[i]);
          }

          return value.join(' ');
        }

        return '';
      };

      plugin.prototype.setupClasses = function (overrides) {
        var _this = this;

        var classes = {};

        if (typeof this.options !== 'undefined' && is.isObject(this.options.classes)) {
          classes = this.options.classes;
        }

        function conventKeyToUpperCase(obj) {
          var upperObj = {};

          for (var name in obj) {
            if (Object.hasOwnProperty.call(obj, name)) {
              if (is.isString(obj[name])) {
                upperObj[name.toUpperCase()] = obj[name];
              } else if (is.isObject(obj[name])) {
                upperObj[name.toUpperCase()] = conventKeyToUpperCase(obj[name]);
              }
            }
          }

          return upperObj;
        }

        this.classes = utils.deepMerge({}, plugin.classes, overrides, conventKeyToUpperCase(classes));

        if (typeof this.classes.NAMESPACE !== 'undefined') {
          var injectNamespace = function injectNamespace(obj) {
            for (var name in obj) {
              if (Object.hasOwnProperty.call(obj, name)) {
                if (is.isString(obj[name])) {
                  obj[name] = _this.getClass(obj[name]);
                } else if (is.isObject(obj[name])) {
                  obj[name] = injectNamespace(obj[name]);
                }
              }
            }

            return obj;
          };

          this.classes = injectNamespace(this.classes);
        }
      };
    };
  }

  function themeable() {
    return function (plugin) {
      plugin.prototype.getThemeClass = function (themes, THEME) {
        if (typeof themes === 'undefined' && typeof this.options !== 'undefined' && is.isString(this.options.theme)) {
          return this.getThemeClass(this.options.theme);
        }

        if (is.isString(themes)) {
          if (typeof THEME === 'undefined' && typeof this.classes !== 'undefined') {
            THEME = this.classes.THEME;
          }

          themes = themes.split(' ');

          if (THEME) {
            for (var i = 0; i < themes.length; i++) {
              themes[i] = THEME.replace('{theme}', themes[i]);
            }
          } else {
            for (var _i = 0; _i < themes.length; _i++) {
              themes[_i] = this.getClass(themes[_i]);
            }
          }

          return themes.join(' ');
        }

        return '';
      };
    };
  }

  function translateable(translations) {
    return function (plugin) {
      plugin.I18N = new I18N({
        locale: plugin.defaults.locale,
        fallbacks: plugin.defaults.localeFallbacks
      }, translations);
      Object.assign(plugin.prototype, {
        setupI18n: function setupI18n() {
          this.i18n = plugin.I18N.instance({
            locale: this.options.locale,
            fallbacks: this.options.localeFallbacks
          });
        },
        translate: function translate(key, args) {
          return this.i18n.translate(key, args);
        },
        setLocale: function setLocale(locale) {
          return this.i18n.setLocale(locale);
        },
        getLocale: function getLocale() {
          return this.i18n.getLocale();
        }
      });
    };
  }

  function optionable() {
    var defaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var enableDataOption = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    return function (plugin) {
      plugin.defaults = defaults;

      plugin.setDefaults = function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        plugin.defaults = utils.deepMerge(plugin.defaults, options);
      };

      if (enableDataOption) {
        plugin.prototype.setupOptions = function () {
          for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
            options[_key] = arguments[_key];
          }

          this.options = utils.deepMerge.apply(void 0, [plugin.defaults].concat(options, [this.getDataOptions()]));
        };

        plugin.prototype.getDataOptions = function () {
          if (!this.element) {
            return {};
          }

          return utils.parseDataOptions(this.element.dataset);
        };
      } else {
        plugin.prototype.setupOptions = function () {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          this.options = utils.deepMerge(plugin.defaults, options);
        };
      }
    };
  }

  function globalRegister(name) {
    return function (plugin) {
      Pj[name] = plugin;
    };
  }

  exports.eventable = eventable;
  exports.globalRegister = globalRegister;
  exports.optionable = optionable;
  exports.register = register;
  exports.stateable = stateable;
  exports.styleable = styleable;
  exports.themeable = themeable;
  exports.translateable = translateable;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
