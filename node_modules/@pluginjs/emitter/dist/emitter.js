/*!
 * @pluginjs/emitter v0.7.15 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@pluginjs/simple-emitter')) :
  typeof define === 'function' && define.amd ? define(['@pluginjs/simple-emitter'], factory) :
  (global = global || self, global['@pluginjs/emitter'] = factory(global['@pluginjs/simple-emitter']));
}(this, function (SimpleEmitter) { 'use strict';

  SimpleEmitter = SimpleEmitter && SimpleEmitter.hasOwnProperty('default') ? SimpleEmitter['default'] : SimpleEmitter;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var Emitter =
  /*#__PURE__*/
  function (_SimpleEmitter) {
    _inherits(Emitter, _SimpleEmitter);

    function Emitter() {
      var _this;

      _classCallCheck(this, Emitter);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Emitter).call(this));
      _this.namespaces = {};
      return _this;
    }

    _createClass(Emitter, [{
      key: "addListener",
      value: function addListener(event, listener) {
        var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var one = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        this.ensureListener(listener);

        var _this$constructor$par = this.constructor.parseEvent(event),
            eventName = _this$constructor$par.eventName,
            namespace = _this$constructor$par.namespace;

        if (!eventName) {
          throw new Error('Event should not be null.');
        }

        if (!this.listeners[eventName]) {
          this.listeners[eventName] = {};
        }

        if (!namespace) {
          this.addToEvent(eventName, context, listener, one);
        } else {
          this.addToEventWithNamespace(eventName, namespace, context, listener, one);
          this.addToNamespace(eventName, namespace);
        }

        return this;
      }
    }, {
      key: "removeListener",
      value: function removeListener(event, listener) {
        if (this.hasListeners(event)) {
          var _this$constructor$par2 = this.constructor.parseEvent(event),
              eventName = _this$constructor$par2.eventName,
              namespace = _this$constructor$par2.namespace;

          switch (true) {
            case Boolean(!namespace && eventName):
              {
                this.filterListeners(eventName, '*', listener);
                break;
              }

            case Boolean(!eventName && namespace):
              {
                var events = this.namespaces[namespace];

                for (var i = 0; i < events.length; i++) {
                  this.filterListeners(events[i], namespace, listener);
                }

                for (var _i = 0; _i < events.length; _i++) {
                  if (!Object.prototype.hasOwnProperty.call(this.listeners[events[_i]], namespace)) {
                    this.removeEventInNamespaces(events[_i], namespace);
                  }
                }

                break;
              }

            case Boolean(eventName && namespace):
              {
                var callback = this.removeEventInNamespaces(eventName, namespace);
                this.filterListeners(eventName, namespace, listener, callback);
                break;
              }

            default:
              {
                break;
              }
          }
        }

        return this;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(event) {
        var _this2 = this;

        if (this.hasListeners(event)) {
          var _this$constructor$par3 = this.constructor.parseEvent(event),
              eventName = _this$constructor$par3.eventName,
              namespace = _this$constructor$par3.namespace;

          switch (true) {
            case Boolean(!namespace && eventName):
              {
                var keys = Object.keys(this.listeners[eventName]);
                keys.forEach(function (key) {
                  if (Object.prototype.hasOwnProperty.call(_this2.namespaces, key)) {
                    _this2.removeEventInNamespaces(eventName, key);
                  }
                });
                delete this.listeners[eventName];
                break;
              }

            case Boolean(!eventName && namespace):
              {
                var events = this.namespaces[namespace];

                for (var i = 0; i < events.length; i++) {
                  delete this.listeners[events[i]][namespace];
                }

                delete this.namespaces[namespace];
                break;
              }

            case Boolean(eventName && namespace):
              {
                this.removeEventInNamespaces(eventName, namespace);
                delete this.listeners[eventName][namespace];
                break;
              }

            default:
              break;
          }
        }

        return this;
      }
    }, {
      key: "hasListeners",
      value: function hasListeners(event) {
        var _this$constructor$par4 = this.constructor.parseEvent(event),
            eventName = _this$constructor$par4.eventName,
            namespace = _this$constructor$par4.namespace;

        if (!namespace && eventName) {
          if (!this.listeners[eventName] || Object.keys(this.listeners[eventName]).length === 0) {
            return false;
          }

          return true;
        }

        if (!eventName && namespace) {
          if (!this.namespaces[namespace] || Object.keys(this.namespaces[namespace]).length === 0) {
            return false;
          }

          return true;
        }

        if (eventName && namespace) {
          if (!this.listeners[eventName] || !this.listeners[eventName][namespace] || this.listeners[eventName][namespace].length === 0) {
            return false;
          }

          return true;
        }

        return false;
      }
    }, {
      key: "getListeners",
      value: function getListeners(event) {
        var _this3 = this;

        if (this.hasListeners(event)) {
          var _this$constructor$par5 = this.constructor.parseEvent(event),
              eventName = _this$constructor$par5.eventName,
              namespace = _this$constructor$par5.namespace;

          var sortedListeners = [];

          switch (true) {
            case Boolean(!namespace && eventName):
              {
                var keys = Object.keys(this.listeners[eventName]);
                keys.forEach(function (key) {
                  for (var i = 0; i < _this3.listeners[eventName][key].length; i++) {
                    sortedListeners = sortedListeners.concat(_this3.listeners[eventName][key][i]);
                  }
                });
                return sortedListeners;
              }

            case Boolean(!eventName && namespace):
              {
                var events = this.namespaces[namespace];

                for (var i = 0; i < events.length; i++) {
                  for (var j = 0; j < this.listeners[events[i]][namespace].length; j++) {
                    sortedListeners = sortedListeners.concat(this.listeners[events[i]][namespace][j]);
                  }
                }

                return sortedListeners;
              }

            case Boolean(eventName && namespace):
              {
                var namespaces = this.listeners[eventName];

                if (Object.prototype.hasOwnProperty.call(namespaces, namespace)) {
                  for (var _i2 = 0; _i2 < namespaces[namespace].length; _i2++) {
                    sortedListeners = sortedListeners.concat(namespaces[namespace][_i2]);
                  }

                  return sortedListeners;
                }

                return sortedListeners;
              }

            default:
              break;
          }
        }

        return [];
      }
    }, {
      key: "filterListeners",
      value: function filterListeners(eventName, namespace, listener, callback) {
        var listeners = this.listeners[eventName];

        if (typeof listeners[namespace] !== 'undefined') {
          listeners[namespace] = listeners[namespace].filter(function (value) {
            return value.listener !== listener;
          });

          if (listeners[namespace].length === 0) {
            if (callback) {
              callback();
            }

            delete listeners[namespace];
          }
        }

        this.listeners[eventName] = listeners;
      }
    }, {
      key: "removeEventInNamespaces",
      value: function removeEventInNamespaces(event, namespace) {
        var i = this.namespaces[namespace].length;

        while (i--) {
          if (this.namespaces[namespace][i] === event) {
            this.namespaces[namespace].splice(i, 1);
          }
        }
      }
    }, {
      key: "addToEvent",
      value: function addToEvent(eventName, context, listener) {
        var one = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        if (!this.listeners[eventName]['*']) {
          this.listeners[eventName]['*'] = [];
        }

        this.listeners[eventName]['*'].push({
          context: context,
          listener: listener,
          one: one
        });
      }
    }, {
      key: "addToEventWithNamespace",
      value: function addToEventWithNamespace(eventName, namespace, context, listener) {
        var one = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

        if (!this.listeners[eventName][namespace]) {
          this.listeners[eventName][namespace] = [];
        }

        this.listeners[eventName][namespace].push({
          context: context,
          listener: listener,
          one: one
        });
      }
    }, {
      key: "addToNamespace",
      value: function addToNamespace(eventName, namespace) {
        if (!this.namespaces[namespace]) {
          this.namespaces[namespace] = [];
        }

        if (!this.checkNamespace(eventName, namespace)) {
          this.namespaces[namespace].push(eventName);
        }
      }
    }, {
      key: "checkNamespace",
      value: function checkNamespace(eventName, namespace) {
        for (var i = 0; i < this.namespaces[namespace].length; i++) {
          if (this.namespaces[namespace][i] === eventName) {
            return true;
          }
        }

        return false;
      }
    }], [{
      key: "parseEvent",
      value: function parseEvent(event) {
        var delimiter = '.';

        if (typeof event !== 'string') {
          event = event.toString();
        }

        if (event.indexOf(delimiter) === -1) {
          var _eventName = event.trim().length > 1 ? event : null;

          var _namespace = null;
          return {
            eventName: _eventName,
            namespace: _namespace
          };
        }

        var eventParts = event.split(delimiter);
        var eventName = eventParts[0].trim().length === 0 ? null : eventParts[0];
        var namespace = eventParts[1].trim().length === 0 ? null : eventParts[1];
        return {
          eventName: eventName,
          namespace: namespace
        };
      }
    }]);

    return Emitter;
  }(SimpleEmitter);

  return Emitter;

}));
