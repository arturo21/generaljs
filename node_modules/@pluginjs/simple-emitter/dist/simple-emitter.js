/*!
 * @pluginjs/simple-emitter v0.7.14 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global['@pluginjs/simple-emitter'] = factory());
}(this, function () { 'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var SimpleEmitter =
  /*#__PURE__*/
  function () {
    function SimpleEmitter() {
      _classCallCheck(this, SimpleEmitter);

      this.listeners = {};
    }

    _createClass(SimpleEmitter, [{
      key: "emit",
      value: function emit(event) {
        var listeners = this.getListeners(event);

        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        for (var i = 0; i < listeners.length; i++) {
          var context = null;

          if (listeners[i].context !== null) {
            context = listeners[i].context;
          } else {
            context = {
              type: event
            };
          }

          var result = listeners[i].listener.apply(context, args);

          if (listeners[i].one) {
            this.removeListener(event, listeners[i].listener);
          }

          if (result === false) {
            return false;
          }
        }

        return true;
      }
    }, {
      key: "on",
      value: function on(event, listener, context) {
        return this.addListener(event, listener, context);
      }
    }, {
      key: "once",
      value: function once(event, listener, context) {
        return this.addListenerOnce(event, listener, context);
      }
    }, {
      key: "off",
      value: function off(event, listener) {
        if (typeof listener === 'undefined') {
          return this.removeAllListeners(event);
        }

        return this.removeListener(event, listener);
      }
    }, {
      key: "addListener",
      value: function addListener(event, listener) {
        var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var one = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
        this.ensureListener(listener);

        if (!this.hasListeners(event)) {
          this.listeners[event] = [];
        }

        this.listeners[event].push({
          context: context,
          listener: listener,
          one: one
        });
        return this;
      }
    }, {
      key: "addListenerOnce",
      value: function addListenerOnce(event, listener, context) {
        return this.addListener(event, listener, context, true);
      }
    }, {
      key: "removeListener",
      value: function removeListener(event, listener) {
        if (this.hasListeners(event)) {
          this.listeners[event] = this.listeners[event].filter(function (value) {
            return value.listener !== listener;
          });

          if (this.listeners[event].length === 0) {
            delete this.listeners[event];
          }
        }

        return this;
      }
    }, {
      key: "removeAllListeners",
      value: function removeAllListeners(event) {
        if (this.hasListeners(event)) {
          delete this.listeners[event];
        }

        return this;
      }
    }, {
      key: "hasListeners",
      value: function hasListeners(event) {
        if (!this.listeners[event] || this.listeners[event].length === 0) {
          return false;
        }

        return true;
      }
    }, {
      key: "getListeners",
      value: function getListeners(event) {
        if (this.hasListeners(event)) {
          return this.listeners[event];
        }

        return [];
      }
    }, {
      key: "ensureListener",
      value: function ensureListener(listener) {
        var type = _typeof(listener);

        if (type === 'function') {
          return listener;
        }

        throw new TypeError("Listeners should be function or closure. Received type: ".concat(type));
      }
    }]);

    return SimpleEmitter;
  }();

  return SimpleEmitter;

}));
