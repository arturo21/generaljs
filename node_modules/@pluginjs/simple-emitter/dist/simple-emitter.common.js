/*!
 * @pluginjs/simple-emitter v0.7.14 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
'use strict';

class SimpleEmitter {
  constructor() {
    this.listeners = {};
  }

  emit(event) {
    var listeners = this.getListeners(event);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    for (var i = 0; i < listeners.length; i++) {
      var context = null;

      if (listeners[i].context !== null) {
        context = listeners[i].context;
      } else {
        context = {
          type: event
        };
      }

      var result = listeners[i].listener.apply(context, args);

      if (listeners[i].one) {
        this.removeListener(event, listeners[i].listener);
      }

      if (result === false) {
        return false;
      }
    }

    return true;
  }

  on(event, listener, context) {
    return this.addListener(event, listener, context);
  }

  once(event, listener, context) {
    return this.addListenerOnce(event, listener, context);
  }

  off(event, listener) {
    if (typeof listener === 'undefined') {
      return this.removeAllListeners(event);
    }

    return this.removeListener(event, listener);
  }

  addListener(event, listener) {
    var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var one = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    this.ensureListener(listener);

    if (!this.hasListeners(event)) {
      this.listeners[event] = [];
    }

    this.listeners[event].push({
      context,
      listener,
      one
    });
    return this;
  }

  addListenerOnce(event, listener, context) {
    return this.addListener(event, listener, context, true);
  }

  removeListener(event, listener) {
    if (this.hasListeners(event)) {
      this.listeners[event] = this.listeners[event].filter(value => value.listener !== listener);

      if (this.listeners[event].length === 0) {
        delete this.listeners[event];
      }
    }

    return this;
  }

  removeAllListeners(event) {
    if (this.hasListeners(event)) {
      delete this.listeners[event];
    }

    return this;
  }

  hasListeners(event) {
    if (!this.listeners[event] || this.listeners[event].length === 0) {
      return false;
    }

    return true;
  }

  getListeners(event) {
    if (this.hasListeners(event)) {
      return this.listeners[event];
    }

    return [];
  }

  ensureListener(listener) {
    var type = typeof listener;

    if (type === 'function') {
      return listener;
    }

    throw new TypeError("Listeners should be function or closure. Received type: ".concat(type));
  }

}

module.exports = SimpleEmitter;
