/*!
 * @pluginjs/i18n v0.7.16 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
import { deepMerge, getValueByPath } from '@pluginjs/utils';
import template from '@pluginjs/template';

class I18N {
  constructor(defaults, translations) {
    this.defaults = deepMerge(I18N.defaults, defaults);
    this.translations = translations ? translations : {};
  }

  hasTranslation(locale) {
    return locale in this.translations;
  }

  addTranslation(locale, translation) {
    if (this.translations[locale]) {
      Object.assign(this.translations[locale], translation);
    } else {
      this.translations[locale] = translation;
    }
  }

  getTranslation(locale) {
    if (this.translations[locale]) {
      return this.translations[locale];
    }

    return {};
  }

  instance() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var that = this;

    var _options = deepMerge(that.defaults, options);

    var _locale = _options.locale;

    function getMessage(key, locale) {
      var translation = that.getTranslation(locale);
      var message = getValueByPath(translation, key);
      return message;
    }

    return {
      translate(key) {
        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var locale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _locale;
        var message = getMessage(key, locale);

        if (typeof message === 'undefined' && _options.fallbacks) {
          var locales = locale.split('-');

          if (locales.length > 1 && that.hasTranslation(locales[0])) {
            message = getMessage(key, locales[0]);
          }

          if (typeof message === 'undefined') {
            var fallbackLocale;

            if (_options.fallbacks !== true && that.hasTranslation(_options.fallbacks)) {
              fallbackLocale = _options.fallbacks;
            } else {
              fallbackLocale = that.defaults.locale;
            }

            message = getMessage(key, fallbackLocale);
          }
        }

        if (Object.prototype.toString.call(message) === '[object Array]' && message.length >= 2) {
          if (typeof args._number === 'string') {
            if (typeof args[args._number] !== 'undefined') {
              var _number = parseInt(args[args._number], 10);

              if (_number === 1) {
                message = message[0];
              } else if (_number > 1) {
                message = message[1];
              } else if (_number === 0 && message.length >= 3) {
                message = message[2];
              }
            }
          }
        }

        if (typeof message === 'string') {
          var parsed = template.parse(message);

          if (!parsed) {
            return message;
          }

          var _key;

          for (var i = 0; i < parsed.length; i++) {
            _key = parsed[i];

            if (typeof args[_key] === 'undefined') {
              args[_key] = _options.missingPlaceholder(_key);
            } else if (args[_key] === null) {
              args[_key] = _options.nullPlaceholder(_key);
            }
          }

          return template.render(message, args);
        }

        if (Object(message) === message) {
          return message;
        }

        return "[missing \"".concat(locale, ".").concat(key, "\" translation]");
      },

      setLocale(locale) {
        _locale = locale;
      },

      getLocale() {
        return _locale;
      }

    };
  }

  setTranslations(translations) {
    this.translations = translations;
  }

}

I18N.defaults = {
  locale: 'en',
  fallbacks: true,

  nullPlaceholder(key) {
    return "[missing {{".concat(key, "}} value]");
  },

  missingPlaceholder(key) {
    return "[missing {{".concat(key, "}} value]");
  }

};

export default I18N;
