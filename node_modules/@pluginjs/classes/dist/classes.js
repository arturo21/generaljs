/*!
 * @pluginjs/classes v0.7.16 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@pluginjs/utils'), require('@pluginjs/is')) :
  typeof define === 'function' && define.amd ? define(['exports', '@pluginjs/utils', '@pluginjs/is'], factory) :
  (global = global || self, factory(global['@pluginjs/classes'] = {}, global['@pluginjs/utils'], global['@pluginjs/is']));
}(this, function (exports, utils, is) { 'use strict';

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  var hasClass = utils.curry(function (classes, element) {
    var has = true;
    classes.split(' ').forEach(function (className) {
      has = has && element.classList.contains(className);
    });
    return has;
  });
  var indexOfClass = utils.curry(function (className, element) {
    return element.classList.item(className);
  });
  var addClass = utils.curryWith(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var classes = args.slice(0, -1);
    var element = args.slice(-1)[0];

    if (is.isElement(element)) {
      var _element$classList;

      if (classes.length === 1) {
        classes = classes[0].split(/\s+/g).filter(function (v) {
          return v !== '';
        });
      }

      (_element$classList = element.classList).add.apply(_element$classList, _toConsumableArray(classes));
    }

    return element;
  }, is.isElement);
  var removeClass = utils.curryWith(function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var classes = args.slice(0, -1);
    var element = args.slice(-1)[0];

    if (is.isElement(element)) {
      var _element$classList2;

      if (classes.length === 1) {
        classes = classes[0].split(/\s+/g).filter(function (v) {
          return v !== '';
        });
      }

      (_element$classList2 = element.classList).remove.apply(_element$classList2, _toConsumableArray(classes));
    }

    return element;
  }, is.isElement);
  var toggleClass = utils.curry(function (className, element) {
    element.classList.toggle(className);
    return element;
  });

  exports.addClass = addClass;
  exports.hasClass = hasClass;
  exports.indexOfClass = indexOfClass;
  exports.removeClass = removeClass;
  exports.toggleClass = toggleClass;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
