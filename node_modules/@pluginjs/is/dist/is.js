/*!
 * @pluginjs/is v0.7.15 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (global = global || self, factory(global['@pluginjs/is'] = {}));
}(this, function (exports) { 'use strict';

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  /* eslint-disable */

  /* Credit to http://is.js.org MIT */
  var toString = Object.prototype.toString; // Type checks

  /* -------------------------------------------------------------------------- */
  // is a given value Arguments?

  var isArguments = function isArguments(value) {
    // fallback check is for IE
    return toString.call(value) === '[object Arguments]' || value != null && _typeof(value) === 'object' && 'callee' in value;
  }; // is a given value Array?

  var isArray = function isArray(val) {
    if (Array.isArray) {
      return Array.isArray(val);
    }

    return toString.call(val) === '[object Array]';
  }; // is a given value Boolean?

  var isBoolean = function isBoolean(val) {
    return val === true || val === false || toString.call(val) === '[object Boolean]';
  }; // is a given value Char?

  var isChar = function isChar(val) {
    return isString(val) && val.length === 1;
  }; // is a given value Date Object?

  var isDate = function isDate(value) {
    return toString.call(value) === '[object Date]';
  }; // is a given object a DOM node?

  var isDomNode = function isDomNode(object) {
    return isObject(object) && object.nodeType > 0;
  }; // is a given object a Element?

  var isElement = function isElement(el) {
    return isObject(el) && el.nodeType === 1 && !isPlainObject(el);
  }; // is a given value window object

  var isWindow = function isWindow(val) {
    return val != null && _typeof(val) === 'object' && 'setInterval' in val;
  }; // is a given value document object

  var isDocument = function isDocument(val) {
    return _typeof(val) === 'object' && val.nodeType === 9;
  }; // is a given value Error object?

  var isError = function isError(val) {
    return toString.call(val) === '[object Error]';
  }; // is a given value function?

  var isFunction = function isFunction(val) {
    // fallback check is for IE
    return toString.call(val) === '[object Function]' || typeof val === 'function';
  }; // is given value a pure JSON object?

  var isJson = function isJson(value) {
    return toString.call(value) === '[object Object]';
  }; // is a given value NaN?

  var isNan = function isNan(val) {
    // NaN is number :) Also it is the only value which does not equal itself
    return val !== val;
  }; // is a given value null?

  var isNull = function isNull(val) {
    return val === null;
  }; // is a given value number?

  var isNumber = function isNumber(val) {
    return !isNan(val) && toString.call(val) === '[object Number]';
  }; // is a given value object?

  var isObject = function isObject(val) {
    return Object(val) === val;
  }; // is a given value plain object?

  var isPlainObject = function isPlainObject(val) {
    return toString.call(val) === '[object Object]';
  }; // is a given value empty object?

  var isEmptyObject = function isEmptyObject(val) {
    return isObject(val) && Object.getOwnPropertyNames(val).length == 0;
  }; // is a given value RegExp?

  var isRegexp = function isRegexp(val) {
    return toString.call(val) === '[object RegExp]';
  }; // is a given value String?

  var isString = function isString(val) {
    return typeof val === 'string' || toString.call(val) === '[object String]';
  }; // is a given value undefined?

  var isUndefined = function isUndefined(val) {
    return val === void 0;
  }; // is a given value Map?

  var isMap = function isMap(val) {
    return val != null && val.constructor ? val.constructor.name === 'Map' : false;
  }; // is a given value Set?

  var isSet = function isSet(val) {
    return val != null && val.constructor ? val.constructor.name === 'Set' : false;
  }; // is a given value Promise?

  var isPromise = function isPromise(val) {
    return val != null && val.constructor ? val.constructor.name === 'Promise' : false;
  }; // is a given value Symbol?

  var isSymbol = function isSymbol(val) {
    return val != null && val.constructor ? val.constructor.name === 'Symbol' : false;
  }; // is a given value is empty

  var isEmpty = function isEmpty(val) {
    return isNumber(val) && val === 0 || isArray(val) && val.length === 0 || isString(val) && val === '' || isEmptyObject(val) || isNull(val) || isUndefined(val) || val === false;
  }; // Arithmetic checks

  /* -------------------------------------------------------------------------- */
  // is a given value numeric?

  var isNumeric = function isNumeric(n) {
    return (isNumber(n) || isString(n)) && !isNan(n - parseFloat(n));
  }; // is a given number percentage?

  var isPercentage = function isPercentage(n) {
    return typeof n === 'string' && n.indexOf('%') !== -1;
  }; // is a given number decimal?

  var isDecimal = function isDecimal(n) {
    return isNumber(n) && n % 1 !== 0;
  }; // is a given number finite?

  var isFinite = function isFinite(n) {
    return !isInfinite(n) && !isNan(n);
  }; // is a given number infinite?

  var isInfinite = function isInfinite(n) {
    return n === Infinity || n === -Infinity;
  };
  var isInteger = function isInteger(n) {
    return isNumber(n) && n % 1 === 0;
  }; // is a given number negative?

  var isNegative = function isNegative(n) {
    return isNumber(n) && n < 0;
  }; // is a given number positive?

  var isPositive = function isPositive(n) {
    return isNumber(n) && n > 0;
  };

  exports.isArguments = isArguments;
  exports.isArray = isArray;
  exports.isBoolean = isBoolean;
  exports.isChar = isChar;
  exports.isDate = isDate;
  exports.isDecimal = isDecimal;
  exports.isDocument = isDocument;
  exports.isDomNode = isDomNode;
  exports.isElement = isElement;
  exports.isEmpty = isEmpty;
  exports.isEmptyObject = isEmptyObject;
  exports.isError = isError;
  exports.isFinite = isFinite;
  exports.isFunction = isFunction;
  exports.isInfinite = isInfinite;
  exports.isInteger = isInteger;
  exports.isJson = isJson;
  exports.isMap = isMap;
  exports.isNan = isNan;
  exports.isNegative = isNegative;
  exports.isNull = isNull;
  exports.isNumber = isNumber;
  exports.isNumeric = isNumeric;
  exports.isObject = isObject;
  exports.isPercentage = isPercentage;
  exports.isPlainObject = isPlainObject;
  exports.isPositive = isPositive;
  exports.isPromise = isPromise;
  exports.isRegexp = isRegexp;
  exports.isSet = isSet;
  exports.isString = isString;
  exports.isSymbol = isSymbol;
  exports.isUndefined = isUndefined;
  exports.isWindow = isWindow;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
