/*!
 * @pluginjs/is v0.7.15 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/* eslint-disable */

/* Credit to http://is.js.org MIT */
var toString = Object.prototype.toString; // Type checks

/* -------------------------------------------------------------------------- */
// is a given value Arguments?

var isArguments = value => {
  // fallback check is for IE
  return toString.call(value) === '[object Arguments]' || value != null && typeof value === 'object' && 'callee' in value;
}; // is a given value Array?

var isArray = val => {
  if (Array.isArray) {
    return Array.isArray(val);
  }

  return toString.call(val) === '[object Array]';
}; // is a given value Boolean?

var isBoolean = val => {
  return val === true || val === false || toString.call(val) === '[object Boolean]';
}; // is a given value Char?

var isChar = val => {
  return isString(val) && val.length === 1;
}; // is a given value Date Object?

var isDate = value => {
  return toString.call(value) === '[object Date]';
}; // is a given object a DOM node?

var isDomNode = object => {
  return isObject(object) && object.nodeType > 0;
}; // is a given object a Element?

var isElement = el => {
  return isObject(el) && el.nodeType === 1 && !isPlainObject(el);
}; // is a given value window object

var isWindow = val => {
  return val != null && typeof val === 'object' && 'setInterval' in val;
}; // is a given value document object

var isDocument = val => {
  return typeof val === 'object' && val.nodeType === 9;
}; // is a given value Error object?

var isError = val => {
  return toString.call(val) === '[object Error]';
}; // is a given value function?

var isFunction = val => {
  // fallback check is for IE
  return toString.call(val) === '[object Function]' || typeof val === 'function';
}; // is given value a pure JSON object?

var isJson = value => {
  return toString.call(value) === '[object Object]';
}; // is a given value NaN?

var isNan = val => {
  // NaN is number :) Also it is the only value which does not equal itself
  return val !== val;
}; // is a given value null?

var isNull = val => {
  return val === null;
}; // is a given value number?

var isNumber = val => {
  return !isNan(val) && toString.call(val) === '[object Number]';
}; // is a given value object?

var isObject = val => {
  return Object(val) === val;
}; // is a given value plain object?

var isPlainObject = val => {
  return toString.call(val) === '[object Object]';
}; // is a given value empty object?

var isEmptyObject = val => {
  return isObject(val) && Object.getOwnPropertyNames(val).length == 0;
}; // is a given value RegExp?

var isRegexp = val => {
  return toString.call(val) === '[object RegExp]';
}; // is a given value String?

var isString = val => {
  return typeof val === 'string' || toString.call(val) === '[object String]';
}; // is a given value undefined?

var isUndefined = val => {
  return val === void 0;
}; // is a given value Map?

var isMap = val => {
  return val != null && val.constructor ? val.constructor.name === 'Map' : false;
}; // is a given value Set?

var isSet = val => {
  return val != null && val.constructor ? val.constructor.name === 'Set' : false;
}; // is a given value Promise?

var isPromise = val => {
  return val != null && val.constructor ? val.constructor.name === 'Promise' : false;
}; // is a given value Symbol?

var isSymbol = val => {
  return val != null && val.constructor ? val.constructor.name === 'Symbol' : false;
}; // is a given value is empty

var isEmpty = val => {
  return isNumber(val) && val === 0 || isArray(val) && val.length === 0 || isString(val) && val === '' || isEmptyObject(val) || isNull(val) || isUndefined(val) || val === false;
}; // Arithmetic checks

/* -------------------------------------------------------------------------- */
// is a given value numeric?

var isNumeric = n => {
  return (isNumber(n) || isString(n)) && !isNan(n - parseFloat(n));
}; // is a given number percentage?

var isPercentage = n => {
  return typeof n === 'string' && n.indexOf('%') !== -1;
}; // is a given number decimal?

var isDecimal = n => {
  return isNumber(n) && n % 1 !== 0;
}; // is a given number finite?

var isFinite = n => {
  return !isInfinite(n) && !isNan(n);
}; // is a given number infinite?

var isInfinite = n => {
  return n === Infinity || n === -Infinity;
};
var isInteger = n => {
  return isNumber(n) && n % 1 === 0;
}; // is a given number negative?

var isNegative = n => {
  return isNumber(n) && n < 0;
}; // is a given number positive?

var isPositive = n => {
  return isNumber(n) && n > 0;
};

exports.isArguments = isArguments;
exports.isArray = isArray;
exports.isBoolean = isBoolean;
exports.isChar = isChar;
exports.isDate = isDate;
exports.isDecimal = isDecimal;
exports.isDocument = isDocument;
exports.isDomNode = isDomNode;
exports.isElement = isElement;
exports.isEmpty = isEmpty;
exports.isEmptyObject = isEmptyObject;
exports.isError = isError;
exports.isFinite = isFinite;
exports.isFunction = isFunction;
exports.isInfinite = isInfinite;
exports.isInteger = isInteger;
exports.isJson = isJson;
exports.isMap = isMap;
exports.isNan = isNan;
exports.isNegative = isNegative;
exports.isNull = isNull;
exports.isNumber = isNumber;
exports.isNumeric = isNumeric;
exports.isObject = isObject;
exports.isPercentage = isPercentage;
exports.isPlainObject = isPlainObject;
exports.isPositive = isPositive;
exports.isPromise = isPromise;
exports.isRegexp = isRegexp;
exports.isSet = isSet;
exports.isString = isString;
exports.isSymbol = isSymbol;
exports.isUndefined = isUndefined;
exports.isWindow = isWindow;
