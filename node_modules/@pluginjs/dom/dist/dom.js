/*!
 * @pluginjs/dom v0.7.17 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@pluginjs/utils'), require('@pluginjs/is')) :
  typeof define === 'function' && define.amd ? define(['exports', '@pluginjs/utils', '@pluginjs/is'], factory) :
  (global = global || self, factory(global['@pluginjs/dom'] = {}, global['@pluginjs/utils'], global['@pluginjs/is']));
}(this, function (exports, utils, is) { 'use strict';

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) {
      for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

      return arr2;
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  var parseHTML = function parseHTML() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var htmlString = Array.isArray(args[0]) ? args[0].reduce(function (result, str, index) {
      return result + args[index] + str;
    }) : args[0]; // if('content' in document.createElement('template')) {
    //   const temp = document.createElement('template')
    //   temp.innerHTML = htmlString
    //   return temp.content.cloneNode(true)
    // } else {

    var el = document.createElement('div');
    el.innerHTML = htmlString;

    if (el.children.length === 1) {
      return el.children[0];
    }

    var fragment = document.createDocumentFragment();

    if (el.children.length) {
      while (el.children.length > 0) {
        fragment.appendChild(el.children[0]);
      }
    } else {
      while (el.childNodes.length > 0) {
        fragment.appendChild(el.childNodes[0]);
      }
    }

    return fragment; // }
  }; // ----------
  // Traversal
  // ----------

  var query = function query(selector) {
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    return parent.querySelector(selector);
  };
  var queryAll = function queryAll(selector) {
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    return Array.from(parent.querySelectorAll(selector));
  };
  var find = utils.curry(function (selector, parent) {
    return parent.querySelector(selector);
  });
  var findAll = utils.curry(function (selector, parent) {
    return Array.from(parent.querySelectorAll(selector));
  });
  var has = function has(selector, parent) {
    if (is.isString(selector)) {
      return Boolean(queryAll(selector, parent).length);
    }

    return parent.contains(selector);
  };
  var contents = function contents(el) {
    if (el.tagName === 'IFRAME') {
      return [el.contentDocument];
    }

    return el.childNodes;
  };
  var children = function children(selector, el) {
    if (!is.isString(selector) && typeof el === 'undefined') {
      el = selector;
      selector = undefined;
    }

    if (!is.isElement(el)) {
      return [];
    }

    if (is.isString(selector)) {
      return Array.from(el.children).filter(function (c) {
        return c.matches(selector);
      });
    }

    return Array.from(el.children);
  };
  var siblings = function siblings(selector, el) {
    if (!is.isString(selector) && typeof el === 'undefined') {
      el = selector;
      selector = undefined;
    }

    if (!is.isElement(el)) {
      return [];
    }

    return children(selector, el.parentNode).filter(function (element) {
      return element !== el;
    });
  };
  var prev = function prev(el) {
    return el.previousElementSibling;
  };
  var next = function next(el) {
    return el.nextElementSibling;
  };
  var prevWith = utils.curry(function (fn, el) {
    var prevElement = el.previousElementSibling;

    if (!prevElement) {
      return null;
    }

    if (fn(prevElement)) {
      return prevElement;
    }

    return prevWith(fn, prevElement);
  });
  var nextWith = utils.curry(function (fn, el) {
    var nextElement = el.nextElementSibling;

    if (!nextElement) {
      return null;
    }

    if (fn(nextElement)) {
      return nextElement;
    }

    return nextWith(fn, nextElement);
  });
  var parent = function parent(el) {
    return el.parentNode;
  };
  var parents = function parents(selector, el) {
    if (!is.isString(selector) && typeof el === 'undefined') {
      el = selector;
      selector = undefined;
    }

    var result = [];
    var last = el;

    while (is.isElement(last) && last.parentNode && last !== document.body.parentNode) {
      last = last.parentNode;

      if (!selector || selector && last.matches(selector)) {
        result.push(last);
      }
    }

    return result;
  };
  var parentWith = utils.curry(function (fn, el) {
    var parentElement = el.parentNode;

    if (!parentElement || parentElement === document) {
      return false;
    }

    if (fn(parentElement)) {
      return parentElement;
    }

    return parentWith(fn, parentElement);
  });
  var closest = function closest(selector, el) {
    if (el.matches(selector)) {
      return el;
    }

    return parentWith(function (el) {
      return el.matches(selector);
    }, el);
  };
  var offsetParent = function offsetParent(el) {
    var offsetParent = el.offsetParent;

    while (offsetParent && offsetParent.style.position === 'static') {
      offsetParent = offsetParent.offsetParent;
    }

    return offsetParent || document.documentElement;
  };
  var scrollParent = function scrollParent(el) {
    return parentWith(function (parent) {
      return parent.scrollHeight > parent.clientHeight;
    }, el);
  };
  var indexOf = function indexOf(el) {
    return _toConsumableArray(el.parentElement.children).indexOf(el);
  }; // ---------
  // Data
  // ----------

  var dataStore = '__pluginjsData';

  var getCachedData = function getCachedData(el) {
    return el[dataStore] = el[dataStore] || {};
  };

  var getData = function getData(key, el) {
    if (is.isElement(key) && typeof el === 'undefined') {
      el = key;
      key = undefined;
    }

    var cache = getCachedData(el);

    if (key) {
      if (!(key in cache)) {
        var value = el.dataset[key] || el.dataset[utils.camelize(key, false)];

        if (value !== undefined) {
          try {
            value = JSON.parse(value);
          } catch (e) {} // eslint-disable-line


          cache[key] = value;
        }
      }

      return cache[key];
    }

    return cache;
  };
  var setData = function setData(key, value, el) {
    getCachedData(el)[key] = value;
    return el;
  };
  var removeData = function removeData(key, el) {
    if (is.isElement(key) && typeof el === 'undefined') {
      el = key;
      key = undefined;
    }

    if (typeof key === 'undefined') {
      delete el[dataStore];
    } else {
      delete getCachedData(el)[key];
    }

    return el;
  };
  var hasData = function hasData(el) {
    return dataStore in el ? !is.isEmptyObject(el[dataStore]) : false;
  };
  var data = utils.curryWith(function (key, value, el) {
    if (is.isElement(value) && typeof el === 'undefined') {
      el = value;
      value = undefined;
    }

    if (typeof key === 'string') {
      if (typeof value !== 'undefined') {
        setData(key, value, el);
      } else {
        return getData(key, el);
      }
    } else {
      Object.entries(key).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            k = _ref2[0],
            v = _ref2[1];

        return setData(k, v, el);
      });
    }

    return el;
  }, is.isElement); // -----------
  // Attributes
  // -----------

  var attr = utils.curryWith(function (args, value, el) {
    if (is.isElement(value) && typeof el === 'undefined') {
      el = value;
      value = undefined;
    }

    if (typeof args === 'string') {
      if (typeof value !== 'undefined') {
        el.setAttribute(args, value);
      } else {
        return el.getAttribute(args);
      }
    } else {
      Object.entries(args).forEach(function (_ref3) {
        var _ref4 = _slicedToArray(_ref3, 2),
            key = _ref4[0],
            value = _ref4[1];

        return el.setAttribute(key, value);
      });
    }

    return el;
  }, is.isElement);
  var removeAttr = utils.curry(function (attrs, el) {
    attrs.split(' ').forEach(function (attr) {
      el.removeAttribute(attr);
    });
    return el;
  });
  var propMap = {
    tabindex: 'tabIndex',
    readonly: 'readOnly',
    for: 'htmlFor',
    class: 'className',
    maxlength: 'maxLength',
    cellspacing: 'cellSpacing',
    cellpadding: 'cellPadding',
    rowspan: 'rowSpan',
    colspan: 'colSpan',
    usemap: 'useMap',
    frameborder: 'frameBorder',
    contenteditable: 'contentEditable'
  };
  var prop = utils.curryWith(function (props, value, el) {
    if (is.isElement(value) && typeof el === 'undefined') {
      el = value;
      value = undefined;
    }

    if (typeof props === 'string') {
      if (typeof value !== 'undefined') {
        el[propMap[props] || props] = value;
      } else {
        return el[propMap[props] || props];
      }
    } else {
      Object.entries(props).forEach(function (_ref5) {
        var _ref6 = _slicedToArray(_ref5, 2),
            key = _ref6[0],
            value = _ref6[1];

        el[propMap[key] || key] = value;
      });
    }

    return el;
  }, is.isElement);
  var removeProp = utils.curry(function (props, el) {
    props.split(' ').forEach(function (prop) {
      prop = propMap[prop] || prop;
      delete el[prop];
    });
    return el;
  }); // --------------
  // Manipulation
  // --------------

  var clone = utils.curry(function (el) {
    return el.cloneNode(true);
  });
  var detach = utils.curry(function (el) {
    if (el.parentNode) {
      el.parentNode.removeChild(el);
    }

    return el;
  });
  var remove = utils.curry(function (el) {
    return el.remove();
  });
  var empty = utils.curry(function (el) {
    while (el.lastChild) {
      el.removeChild(el.lastChild);
    }

    return el;
  });
  var html = utils.curryWith(function (content, el) {
    if (!is.isString(content) && typeof el === 'undefined') {
      el = content;
      content = undefined;
    }

    if (typeof content === 'undefined') {
      return el.innerHTML;
    }

    el.innerHTML = content;
    return el;
  }, is.isElement);
  var text = utils.curryWith(function (content, el) {
    if (!is.isString(content) && typeof el === 'undefined') {
      el = content;
      content = undefined;
    }

    if (typeof content === 'undefined') {
      return el.textContent;
    }

    el.textContent = content;
    return el;
  }, is.isElement);
  var append = utils.curry(function (child, el) {
    if (is.isString(child)) {
      el.insertAdjacentHTML('beforeend', child);
    } else {
      el.append(child);
    }

    return el;
  });
  var appendTo = utils.curry(function (child, el) {
    if (is.isString(child)) {
      child = parseHTML(child);
    }

    el.append(child);
    return child;
  });
  var prepend = utils.curry(function (child, el) {
    if (is.isString(child)) {
      el.insertAdjacentHTML('afterbegin', child);
    } else {
      el.prepend(child);
    }

    return el;
  });
  var prependTo = utils.curry(function (child, el) {
    if (is.isString(child)) {
      child = parseHTML(child);
    }

    el.prepend(child);
    return child;
  });
  var before = utils.curry(function (newElement, el) {
    if (is.isString(newElement)) {
      el.insertAdjacentHTML('beforebegin', newElement);
    } else {
      el.parentNode.insertBefore(newElement, el);
    }

    return el;
  });
  var insertBefore = utils.curry(function (newElement, el) {
    if (is.isString(newElement)) {
      newElement = parseHTML(newElement);
    }

    if (NodeList.prototype.isPrototypeOf(newElement)) {
      // eslint-disable-line
      newElement.forEach(function (i) {
        el.parentNode.insertBefore(i, el);
      });
    } else {
      el.parentNode.insertBefore(newElement, el);
    }

    return newElement;
  });
  var after = utils.curry(function (newElement, el) {
    if (is.isString(newElement)) {
      el.insertAdjacentHTML('afterend', newElement);
    } else {
      el.parentNode.insertBefore(newElement, el.nextElementSibling);
    }

    return el;
  });
  var insertAfter = utils.curry(function (newElement, el) {
    if (is.isString(newElement)) {
      newElement = parseHTML(newElement);
    }

    if (NodeList.prototype.isPrototypeOf(newElement)) {
      // eslint-disable-line
      newElement.forEach(function (i) {
        el.parentNode.insertBefore(i, el.nextElementSibling);
      });
    } else {
      el.parentNode.insertBefore(newElement, el.nextElementSibling);
    }

    return newElement;
  });
  var wrap = utils.curry(function (wrapElement, el) {
    if (is.isString(wrapElement)) {
      wrapElement = parseHTML(wrapElement);
    }

    insertBefore(wrapElement, el);
    append(el, wrapElement);
    return wrapElement;
  });
  var wrapInner = utils.curry(function (newElement, el) {
    if (is.isString(newElement)) {
      newElement = parseHTML(newElement);
    }

    newElement.innerHTML = el.innerHTML;
    el.innerHTML = '';
    el.append(newElement);
    return el;
  });
  var wrapAll = utils.curry(function (wrapElement, elementList) {
    var _wrapElement;

    if (is.isString(wrapElement)) {
      wrapElement = parseHTML(wrapElement);
    }

    insertBefore(wrapElement, elementList[0]);

    (_wrapElement = wrapElement).append.apply(_wrapElement, _toConsumableArray(elementList));

    return wrapElement;
  });
  var unwrap = utils.curryWith(function (selector, el) {
    if (!is.isString(selector) && typeof el === 'undefined') {
      el = selector;
      selector = undefined;
    }

    var parentEl = el.parentNode;

    if (!selector || parentEl.matches(selector)) {
      children(parentEl).forEach(function (child) {
        insertBefore(child, parentEl);
      });
      parentEl.remove();
    }

    return el;
  }, is.isElement);
  var replace = utils.curry(function (newContent, el) {
    if (is.isString(newContent)) {
      newContent = parseHTML(newContent);
    }

    el.parentNode.replaceChild(newContent, el);
    el.remove();
    return newContent;
  });

  exports.after = after;
  exports.append = append;
  exports.appendTo = appendTo;
  exports.attr = attr;
  exports.before = before;
  exports.children = children;
  exports.clone = clone;
  exports.closest = closest;
  exports.contents = contents;
  exports.data = data;
  exports.detach = detach;
  exports.empty = empty;
  exports.find = find;
  exports.findAll = findAll;
  exports.getData = getData;
  exports.has = has;
  exports.hasData = hasData;
  exports.html = html;
  exports.indexOf = indexOf;
  exports.insertAfter = insertAfter;
  exports.insertBefore = insertBefore;
  exports.next = next;
  exports.nextWith = nextWith;
  exports.offsetParent = offsetParent;
  exports.parent = parent;
  exports.parentWith = parentWith;
  exports.parents = parents;
  exports.parseHTML = parseHTML;
  exports.prepend = prepend;
  exports.prependTo = prependTo;
  exports.prev = prev;
  exports.prevWith = prevWith;
  exports.prop = prop;
  exports.query = query;
  exports.queryAll = queryAll;
  exports.remove = remove;
  exports.removeAttr = removeAttr;
  exports.removeData = removeData;
  exports.removeProp = removeProp;
  exports.replace = replace;
  exports.scrollParent = scrollParent;
  exports.setData = setData;
  exports.siblings = siblings;
  exports.text = text;
  exports.unwrap = unwrap;
  exports.wrap = wrap;
  exports.wrapAll = wrapAll;
  exports.wrapInner = wrapInner;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
