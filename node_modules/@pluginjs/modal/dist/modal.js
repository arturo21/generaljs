/*!
 * @pluginjs/modal v0.7.23 (https://pluginjs.com)
 * Copyright 2020 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('@pluginjs/template'), require('@pluginjs/utils'), require('@pluginjs/is'), require('@pluginjs/classes'), require('@pluginjs/events'), require('@pluginjs/dom'), require('@pluginjs/decorator'), require('@pluginjs/global-component')) :
  typeof define === 'function' && define.amd ? define(['@pluginjs/template', '@pluginjs/utils', '@pluginjs/is', '@pluginjs/classes', '@pluginjs/events', '@pluginjs/dom', '@pluginjs/decorator', '@pluginjs/global-component'], factory) :
  (global = global || self, global['@pluginjs/modal'] = factory(global['@pluginjs/template'], global['@pluginjs/utils'], global['@pluginjs/is'], global['@pluginjs/classes'], global['@pluginjs/events'], global['@pluginjs/dom'], global['@pluginjs/decorator'], global['@pluginjs/global-component']));
}(this, (function (templateEngine, utils, is, classes$1, events$1, dom, decorator, GlobalComponent) { 'use strict';

  templateEngine = templateEngine && templateEngine.hasOwnProperty('default') ? templateEngine['default'] : templateEngine;
  GlobalComponent = GlobalComponent && GlobalComponent.hasOwnProperty('default') ? GlobalComponent['default'] : GlobalComponent;

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  var namespace = 'modal';
  var events = {
    OPEN: 'open',
    CLOSE: 'close',
    DESTROY: 'destroy',
    READY: 'ready'
  };
  var classes = {
    NAMESPACE: "pj-".concat(namespace),
    ELEMENT: '{namespace}',
    THEME: '{namespace}--{theme}',
    CLOSE: '{namespace}-close',
    CONTENT: '{namespace}-content',
    TITLE: '{namespace}-title',
    DISABLED: '{namespace}-disabled',
    CONTAINER: '{namespace}-container',
    HEADER: '{namespace}-header',
    BUTTONS: '{namespace}-buttons',
    OVERLAY: '{namespace}-overlay',
    FADEIN: '{namespace}--fadeIn',
    OPEN: '{namespace}-open',
    IN: '{namespace}-in',
    BUTTON: '{namespace}-btn',
    ICON: '{namespace}-icon',
    ICONTITLE: '{namespace}-title-icon'
  };
  var defaults = {
    theme: null,
    template: function template() {
      return "<div class=\"{classes.NAMESPACE}\">\n              {overlay}\n              <div class=\"{classes.CONTAINER}\" role=\"document\">\n                {close}\n                {title}\n                {content}\n                {buttons}\n              </div>\n            </div>";
    },
    templates: {
      close: function close() {
        return '<button type="button" class="pj-icon pj-icon-close {classes.CLOSE}" aria-label="Close"></button>';
      },
      title: function title() {
        return '<div class="{classes.TITLE}"></div>';
      },
      icon: function icon() {
        return '<i class="{classes.ICON} {iconClass}"></i>';
      },
      content: function content() {
        return '<div class="{classes.CONTENT}"></div>';
      },
      buttons: function buttons() {
        return '<div class="{classes.BUTTONS}"></div>';
      },
      overlay: function overlay() {
        return '<div class="{classes.OVERLAY}"></div>';
      },
      button: function button() {
        return '<button class="{classes.BUTTON} {custom}" data-action={action} type="button">{label}</button>';
      }
    },
    title: '',
    content: '',
    html: true,
    closeable: true,
    locale: 'en',
    localeFallbacks: true,
    buttons: null,
    overlay: true,
    overlayCloseOnClick: true,
    appendTo: 'body',
    effect: 'fadeScale',
    defaultButtonClass: 'pj-btn pj-btn-primary',
    icon: null,
    icons: {
      success: 'pj-icon pj-icon-check-circle',
      info: 'pj-icon pj-icon-info-circle',
      error: 'pj-icon pj-icon-close-circle'
    }
  };
  var translations = {
    en: {
      Cancel: 'Cancel',
      Yes: 'Yes'
    },
    zh: {
      Cancel: '取消',
      Yes: '确定'
    }
  };

  var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class;
  var Modal = (_dec = decorator.translateable(translations), _dec2 = decorator.themeable(), _dec3 = decorator.styleable(classes), _dec4 = decorator.eventable(events), _dec5 = decorator.stateable(), _dec6 = decorator.optionable(defaults, false), _dec7 = decorator.register(namespace), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = _dec6(_class = _dec7(_class =
  /*#__PURE__*/
  function (_GlobalComponent) {
    _inherits(Modal, _GlobalComponent);

    function Modal() {
      var _this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Modal);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(Modal).call(this));

      _this.setupOptions(options);

      _this.setupClasses();

      _this.$element = dom.parseHTML(_this.createHtml());
      _this.$container = dom.query(".".concat(_this.classes.CONTAINER), _this.$element);

      _this.setupStates();

      _this.setupI18n();

      _this.initialize();

      _this.bind();

      return _this;
    }

    _createClass(Modal, [{
      key: "validate",
      value: function validate() {
        var _this2 = this;

        if (this.options.buttons) {
          this.options.buttons.forEach(function (button) {
            if (!button.classes) {
              button.classes = _this2.options.defaultButtonClass;
            }

            if (!button.label) {
              button.label = 'Yes';
            }
          });
        }

        return true;
      }
    }, {
      key: "open",
      value: function open() {
        if (this.is('opened')) {
          return false;
        }

        classes$1.addClass("".concat(this.classes.OPEN), dom.query('body'));
        dom.append(this.$element, dom.query(this.options.appendTo));

        if (this.options.overlay) {
          classes$1.addClass("".concat(this.classes.NAMESPACE, "-fadeIn"), this.$overlay);
          classes$1.removeClass("".concat(this.classes.NAMESPACE, "-fadeOut"), this.$overlay);
        }

        classes$1.removeClass("".concat(this.classes.NAMESPACE, "-").concat(this.options.effect, "Out"), this.$container);
        classes$1.addClass("".concat(this.classes.NAMESPACE, "-").concat(this.options.effect, "In"), this.$container); // trigger open

        this.trigger(events.OPEN);
        this.enter('opened');
        this.leave('hide');
        return false;
      }
    }, {
      key: "bind",
      value: function bind() {
        var _this3 = this;

        if (this.options.closeable) {
          events$1.bindEvent(this.eventName('click'), function () {
            _this3.close();
          }, this.$closeBtn);
        } // band buttons


        if (this.options.buttons) {
          events$1.bindEvent(this.eventName('click'), function (event) {
            if (!event.target.classList.contains(_this3.classes.BUTTON) || !dom.data('action', event.target)) {
              return false;
            }

            var action = dom.data('action', event.target);

            for (var i = 0; i < _this3.options.buttons.length; i++) {
              if (action === _this3.options.buttons[i].action) {
                var button = _this3.options.buttons[i];

                if (is.isFunction(button.fn)) {
                  button.fn(_this3.close.bind(_this3));
                } else {
                  _this3.close();
                }
              }
            }

            return false;
          }, this.$buttons);
        } // bind overlay


        if (this.options.overlayCloseOnClick && this.options.overlay) {
          events$1.bindEvent(this.eventName('click'), function () {
            _this3.close();
          }, this.$overlay);
        }
      }
    }, {
      key: "close",
      value: function close() {
        var _this4 = this;

        if (!this.is('opened')) {
          return false;
        }

        classes$1.removeClass("".concat(this.classes.OPEN), dom.query('body')); // close animation

        if (this.options.overlay) {
          classes$1.addClass("".concat(this.classes.NAMESPACE, "-fadeOut"), this.$overlay);
          classes$1.removeClass("".concat(this.classes.NAMESPACE, "-fadeIn"), this.$overlay);
        }

        classes$1.addClass("".concat(this.classes.NAMESPACE, "-").concat(this.options.effect, "Out"), this.$container);
        classes$1.removeClass("".concat(this.classes.NAMESPACE, "-").concat(this.options.effect, "In"), this.$container);

        var animationendCallback = function animationendCallback() {
          _this4.removeOverflow();

          _this4.destroy();
        };

        events$1.bindEventOnce(this.eventName('animationend'), animationendCallback, this.$element); // trigger close

        this.trigger(events.CLOSE);
        this.leave('opened');
        return false;
      }
    }, {
      key: "removeOverflow",
      value: function removeOverflow() {
        var removeOverflow = true;
        var instances = this.constructor.getInstances();
        var length = instances.length;

        if (length === 0) {
          removeOverflow = true;
        } else {
          var hideModel = 0;
          instances.forEach(function (instance) {
            if (instance.is('hide')) {
              hideModel++;
            }
          });

          if (hideModel !== length) {
            removeOverflow = false;
          }
        } // removeClass


        if (removeOverflow) {
          classes$1.removeClass(this.classes.OPEN, window.document.body);
        }
      }
    }, {
      key: "visible",
      value: function visible() {
        if (this.is('opened')) {
          return true;
        }

        return false;
      }
    }, {
      key: "initialize",
      value: function initialize() {
        // Validate data
        this.validate();
        this.$content = dom.query(".".concat(this.classes.CONTENT), this.$element);
        this.$title = dom.query(".".concat(this.classes.TITLE), this.$element);
        this.$closeBtn = dom.query(".".concat(this.classes.CLOSE), this.$element);
        this.$buttons = dom.query(".".concat(this.classes.BUTTONS), this.$element);

        if (this.options.overlay) {
          this.$overlay = dom.query(".".concat(this.classes.OVERLAY), this.$element);
        } // theme


        if (this.options.theme) {
          classes$1.addClass(this.getThemeClass(), this.$container);
        } // set


        if (this.options.title !== '') {
          this.setTitle(this.options.title);
        }

        if (this.options.content !== '') {
          this.setContent(this.options.content);
        }

        if (this.options.buttons) {
          this.setButtons(this.options.buttons);
        } // trigger ready


        this.trigger(events.READY);
        this.enter('initialized');
      }
    }, {
      key: "createHtml",
      value: function createHtml() {
        var close = '';
        var buttons = '';
        var overlay = '';
        var title = '';
        var content = '';
        var icon = '';

        if (this.options.closeable) {
          close = templateEngine.render(this.options.templates.close.call(this), {
            classes: this.classes
          });
        }

        if (this.options.overlay) {
          overlay = templateEngine.render(this.options.templates.overlay.call(this), {
            classes: this.classes
          });
        }

        if (this.options.title !== '') {
          title = templateEngine.render(this.options.templates.title.call(this), {
            classes: this.classes
          });
        }

        if (this.options.content !== '') {
          content = templateEngine.render(this.options.templates.content.call(this), {
            classes: this.classes
          });
        }

        if (this.options.buttons) {
          buttons = templateEngine.render(this.options.templates.buttons.call(this), {
            classes: this.classes
          });
        }

        if (this.options.icon) {
          icon = templateEngine.render(this.options.templates.icon.call(this), {
            classes: this.classes,
            iconClass: this.getIconClass()
          });
          this.$icon = dom.parseHTML(icon);
        }

        var html = templateEngine.render(this.options.template.call(this), {
          classes: this.classes,
          overlay: overlay,
          close: close,
          title: title,
          content: content,
          buttons: buttons
        });
        return html;
      }
    }, {
      key: "getIconClass",
      value: function getIconClass() {
        if (this.options.icons[this.options.icon]) {
          return this.options.icons[this.options.icon];
        }

        if (is.isString(this.options.icon)) {
          return this.options.icon;
        }

        return this.options.icons.success;
      }
    }, {
      key: "setTitle",
      value: function setTitle(title) {
        this.$title.innerHTML = '';

        if (this.options.icon) {
          dom.append(this.$icon, this.$title);
          classes$1.addClass(this.getClass(this.classes.ICONTITLE), this.$title);
        }

        dom.append(title, this.$title);
      }
    }, {
      key: "setContent",
      value: function setContent(content) {
        if (is.isElement(content)) {
          dom.append(content, this.$content);
        } else if (this.options.html) {
          this.$content.innerHTML = content;
        } else {
          this.$content.textContent = content;
        }
      }
    }, {
      key: "setButtons",
      value: function setButtons(buttons) {
        this.$buttons.innerHTML = '';

        for (var button in buttons) {
          if (buttons[button].action) {
            var btn = this.createBtn(buttons[button]);
            dom.append(btn, this.$buttons);
          }
        }
      }
    }, {
      key: "createBtn",
      value: function createBtn(button) {
        var classes = button.classes;
        var action = button.action;
        var label = '';
        var local = ['Yes', 'Cancel'];

        if (local.includes(button.label)) {
          label = this.translate(button.label);
        } else {
          label = button.label;
        }

        var btn = templateEngine.render(this.options.templates.button.call(this), {
          classes: this.classes,
          custom: classes,
          label: label,
          action: action
        });
        return dom.parseHTML(btn);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        if (this.is('initialized')) {
          this.leave('initialized');
        }

        this.trigger(events.DESTROY);
        dom.remove(this.$element);

        _get(_getPrototypeOf(Modal.prototype), "destroy", this).call(this);
      }
    }], [{
      key: "open",
      value: function open() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var instance = new Modal(options);
        instance.open();
        return instance;
      }
    }, {
      key: "init",
      value: function init() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var o = utils.deepMerge(options);
        var instance = new Modal(o);
        instance.enter('hide');
        return instance;
      }
    }, {
      key: "close",
      value: function close(id) {
        var instances = this.getInstances();
        instances.forEach(function (instance) {
          if (instance.instanceId === id) {
            instance.close();
          }
        });
      }
    }, {
      key: "confirm",
      value: function confirm() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (!is.isString(args[0])) {
          return false;
        }

        var opt = utils.deepMerge(defaults, {
          title: '',
          content: '',
          closeable: true,
          buttons: [{
            action: 'cancel',
            label: 'Cancel',
            classes: 'pj-btn pj-btn-outline',
            fn: ''
          }, {
            action: 'yes',
            label: 'Yes',
            classes: 'pj-btn pj-btn-primary',
            fn: ''
          }]
        });
        var str = [];
        var func = [];
        var length = args.length;

        if (length && is.isObject(args[length - 1])) {
          if (args[length - 1].buttons) {
            args[length - 1].buttons.forEach(function (button) {
              opt.buttons.forEach(function (btn) {
                if (button.action === btn.action) {
                  btn.label = button.label;
                  btn.classes = button.classes;
                }
              });
            });
            delete args[length - 1].buttons;
          }

          opt = utils.deepMerge(opt, args[length - 1]);
          length -= 1;
        }

        for (var i = 0; i < length; i++) {
          if (typeof args[i] === 'string') {
            str.push(args[i]);
          } else if (is.isFunction(args[i])) {
            func.push(args[i]);
          }
        }

        if (str.length === 1) {
          opt.content = str[0];
        } else if (str.length > 1) {
          opt.title = str[0];
          opt.content = str[1];
        }

        if (func.length === 1) {
          opt.buttons.forEach(function (button) {
            if (button.action === 'yes') {
              button.fn = func[0];
            }
          });
        } else if (func.length > 1) {
          opt.buttons.forEach(function (button) {
            if (button.action === 'yes') {
              button.fn = func[0];
            }

            if (button.action === 'cancel') {
              button.fn = func[1];
            }
          });
        }

        var instance = new Modal(opt);
        instance.open();
        return instance;
      }
    }, {
      key: "alert",
      value: function alert() {
        if (!is.isString(arguments.length <= 0 ? undefined : arguments[0])) {
          return false;
        }

        var opt = utils.deepMerge(defaults, {
          title: '',
          content: '',
          closeable: true
        });
        var length = arguments.length;

        if (length && is.isObject(length - 1 < 0 || arguments.length <= length - 1 ? undefined : arguments[length - 1])) {
          opt = utils.deepMerge(opt, length - 1 < 0 || arguments.length <= length - 1 ? undefined : arguments[length - 1]);
          length -= 1;
        }

        if (length === 1) {
          opt.content = arguments.length <= 0 ? undefined : arguments[0];
        } else if (length === 2) {
          opt.title = arguments.length <= 0 ? undefined : arguments[0];
          opt.content = arguments.length <= 1 ? undefined : arguments[1];
        }

        var instance = new Modal(opt);
        instance.open();
        return instance;
      }
    }, {
      key: "closeTop",
      value: function closeTop() {
        var instances = this.getInstances();
        var length = instances.length;

        if (!length) {
          return false;
        }

        instances[length - 1].close();
        return true;
      }
    }, {
      key: "closeAll",
      value: function closeAll() {
        var instances = this.getInstances();
        instances.forEach(function (instance) {
          instance.close();
        });
        return true;
      }
    }, {
      key: "getAll",
      value: function getAll() {
        return this.getInstances();
      }
    }, {
      key: "getById",
      value: function getById(id) {
        var instances = this.getInstances();
        var match = null;
        instances.forEach(function (instance) {
          if (instance.instanceId === id) {
            match = instance;
          }
        });
        return match;
      }
    }]);

    return Modal;
  }(GlobalComponent)) || _class) || _class) || _class) || _class) || _class) || _class) || _class);

  return Modal;

})));
