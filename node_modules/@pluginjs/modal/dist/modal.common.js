/*!
 * @pluginjs/modal v0.7.20 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var templateEngine = _interopDefault(require('@pluginjs/template'));
var utils = require('@pluginjs/utils');
var is = require('@pluginjs/is');
var classes$1 = require('@pluginjs/classes');
var events$1 = require('@pluginjs/events');
var dom = require('@pluginjs/dom');
var decorator = require('@pluginjs/decorator');
var GlobalComponent = _interopDefault(require('@pluginjs/global-component'));

var namespace = 'modal';
var events = {
  OPEN: 'open',
  CLOSE: 'close',
  DESTROY: 'destroy',
  READY: 'ready'
};
var classes = {
  NAMESPACE: "pj-".concat(namespace),
  ELEMENT: '{namespace}',
  THEME: '{namespace}--{theme}',
  CLOSE: '{namespace}-close',
  CONTENT: '{namespace}-content',
  TITLE: '{namespace}-title',
  DISABLED: '{namespace}-disabled',
  CONTAINER: '{namespace}-container',
  HEADER: '{namespace}-header',
  BUTTONS: '{namespace}-buttons',
  OVERLAY: '{namespace}-overlay',
  FADEIN: '{namespace}--fadeIn',
  OPEN: '{namespace}-open',
  IN: '{namespace}-in',
  BUTTON: '{namespace}-btn',
  ICON: '{namespace}-icon',
  ICONTITLE: '{namespace}-title-icon'
};
var defaults = {
  theme: null,

  template() {
    return "<div class=\"{classes.NAMESPACE}\">\n              {overlay}\n              <div class=\"{classes.CONTAINER}\" role=\"document\">\n                {close}\n                {title}\n                {content}\n                {buttons}\n              </div>\n            </div>";
  },

  templates: {
    close() {
      return '<button type="button" class="pj-icon pj-icon-close {classes.CLOSE}" aria-label="Close"></button>';
    },

    title() {
      return '<div class="{classes.TITLE}"></div>';
    },

    icon() {
      return '<i class="{classes.ICON} {iconClass}"></i>';
    },

    content() {
      return '<div class="{classes.CONTENT}"></div>';
    },

    buttons() {
      return '<div class="{classes.BUTTONS}"></div>';
    },

    overlay() {
      return '<div class="{classes.OVERLAY}"></div>';
    },

    button() {
      return '<button class="{classes.BUTTON} {custom}" data-action={action} type="button">{label}</button>';
    }

  },
  title: '',
  content: '',
  html: true,
  closeable: true,
  locale: 'en',
  localeFallbacks: true,
  buttons: null,
  overlay: true,
  overlayCloseOnClick: true,
  appendTo: 'body',
  effect: 'fadeScale',
  defaultButtonClass: 'pj-btn pj-btn-primary',
  icon: null,
  icons: {
    success: 'pj-icon pj-icon-check-circle',
    info: 'pj-icon pj-icon-info-circle',
    error: 'pj-icon pj-icon-close-circle'
  }
};
var translations = {
  en: {
    Cancel: 'Cancel',
    Yes: 'Yes'
  },
  zh: {
    Cancel: '取消',
    Yes: '确定'
  }
};

var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class;
var Modal = (_dec = decorator.translateable(translations), _dec2 = decorator.themeable(), _dec3 = decorator.styleable(classes), _dec4 = decorator.eventable(events), _dec5 = decorator.stateable(), _dec6 = decorator.optionable(defaults, false), _dec7 = decorator.register(namespace), _dec(_class = _dec2(_class = _dec3(_class = _dec4(_class = _dec5(_class = _dec6(_class = _dec7(_class = class Modal extends GlobalComponent {
  constructor() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    super();
    this.setupOptions(options);
    this.setupClasses();
    this.$element = dom.parseHTML(this.createHtml());
    this.$container = dom.query(".".concat(this.classes.CONTAINER), this.$element);
    this.setupStates();
    this.setupI18n();
    this.initialize();
    this.bind();
  }

  validate() {
    if (this.options.buttons) {
      this.options.buttons.forEach(button => {
        if (!button.classes) {
          button.classes = this.options.defaultButtonClass;
        }

        if (!button.label) {
          button.label = 'Yes';
        }
      });
    }

    return true;
  }

  open() {
    if (this.is('opened')) {
      return false;
    }

    classes$1.addClass("".concat(this.classes.OPEN), dom.query('body'));
    dom.append(this.$element, dom.query(this.options.appendTo));

    if (this.options.overlay) {
      classes$1.addClass("".concat(this.classes.NAMESPACE, "-fadeIn"), this.$overlay);
      classes$1.removeClass("".concat(this.classes.NAMESPACE, "-fadeOut"), this.$overlay);
    }

    classes$1.removeClass("".concat(this.classes.NAMESPACE, "-").concat(this.options.effect, "Out"), this.$container);
    classes$1.addClass("".concat(this.classes.NAMESPACE, "-").concat(this.options.effect, "In"), this.$container); // trigger open

    this.trigger(events.OPEN);
    this.enter('opened');
    this.leave('hide');
    return false;
  }

  bind() {
    if (this.options.closeable) {
      events$1.bindEvent(this.eventName('click'), () => {
        this.close();
      }, this.$closeBtn);
    } // band buttons


    if (this.options.buttons) {
      events$1.bindEvent(this.eventName('click'), event => {
        if (!event.target.classList.contains(this.classes.BUTTON) || !dom.data('action', event.target)) {
          return false;
        }

        var action = dom.data('action', event.target);

        for (var i = 0; i < this.options.buttons.length; i++) {
          if (action === this.options.buttons[i].action) {
            var button = this.options.buttons[i];

            if (is.isFunction(button.fn)) {
              button.fn(this.close.bind(this));
            } else {
              this.close();
            }
          }
        }

        return false;
      }, this.$buttons);
    } // bind overlay


    if (this.options.overlayCloseOnClick && this.options.overlay) {
      events$1.bindEvent(this.eventName('click'), () => {
        this.close();
      }, this.$overlay);
    }
  }

  close() {
    if (!this.is('opened')) {
      return false;
    }

    classes$1.removeClass("".concat(this.classes.OPEN), dom.query('body')); // close animation

    if (this.options.overlay) {
      classes$1.addClass("".concat(this.classes.NAMESPACE, "-fadeOut"), this.$overlay);
      classes$1.removeClass("".concat(this.classes.NAMESPACE, "-fadeIn"), this.$overlay);
    }

    classes$1.addClass("".concat(this.classes.NAMESPACE, "-").concat(this.options.effect, "Out"), this.$container);
    classes$1.removeClass("".concat(this.classes.NAMESPACE, "-").concat(this.options.effect, "In"), this.$container);

    var animationendCallback = () => {
      this.removeOverflow();
      this.destroy();
    };

    events$1.bindEventOnce(this.eventName('animationend'), animationendCallback, this.$element); // trigger close

    this.trigger(events.CLOSE);
    this.leave('opened');
    return false;
  }

  removeOverflow() {
    var removeOverflow = true;
    var instances = this.constructor.getInstances();
    var length = instances.length;

    if (length === 0) {
      removeOverflow = true;
    } else {
      var hideModel = 0;
      instances.forEach(instance => {
        if (instance.is('hide')) {
          hideModel++;
        }
      });

      if (hideModel !== length) {
        removeOverflow = false;
      }
    } // removeClass


    if (removeOverflow) {
      classes$1.removeClass(this.classes.OPEN, window.document.body);
    }
  }

  visible() {
    if (this.is('opened')) {
      return true;
    }

    return false;
  }

  initialize() {
    // Validate data
    this.validate();
    this.$content = dom.query(".".concat(this.classes.CONTENT), this.$element);
    this.$title = dom.query(".".concat(this.classes.TITLE), this.$element);
    this.$closeBtn = dom.query(".".concat(this.classes.CLOSE), this.$element);
    this.$buttons = dom.query(".".concat(this.classes.BUTTONS), this.$element);

    if (this.options.overlay) {
      this.$overlay = dom.query(".".concat(this.classes.OVERLAY), this.$element);
    } // theme


    if (this.options.theme) {
      classes$1.addClass(this.getThemeClass(), this.$container);
    } // set


    if (this.options.title !== '') {
      this.setTitle(this.options.title);
    }

    if (this.options.content !== '') {
      this.setContent(this.options.content);
    }

    if (this.options.buttons) {
      this.setButtons(this.options.buttons);
    } // trigger ready


    this.trigger(events.READY);
    this.enter('initialized');
  }

  createHtml() {
    var close = '';
    var buttons = '';
    var overlay = '';
    var title = '';
    var content = '';
    var icon = '';

    if (this.options.closeable) {
      close = templateEngine.render(this.options.templates.close.call(this), {
        classes: this.classes
      });
    }

    if (this.options.overlay) {
      overlay = templateEngine.render(this.options.templates.overlay.call(this), {
        classes: this.classes
      });
    }

    if (this.options.title !== '') {
      title = templateEngine.render(this.options.templates.title.call(this), {
        classes: this.classes
      });
    }

    if (this.options.content !== '') {
      content = templateEngine.render(this.options.templates.content.call(this), {
        classes: this.classes
      });
    }

    if (this.options.buttons) {
      buttons = templateEngine.render(this.options.templates.buttons.call(this), {
        classes: this.classes
      });
    }

    if (this.options.icon) {
      icon = templateEngine.render(this.options.templates.icon.call(this), {
        classes: this.classes,
        iconClass: this.getIconClass()
      });
      this.$icon = dom.parseHTML(icon);
    }

    var html = templateEngine.render(this.options.template.call(this), {
      classes: this.classes,
      overlay,
      close,
      title,
      content,
      buttons
    });
    return html;
  }

  getIconClass() {
    if (this.options.icons[this.options.icon]) {
      return this.options.icons[this.options.icon];
    }

    if (is.isString(this.options.icon)) {
      return this.options.icon;
    }

    return this.options.icons.success;
  }

  setTitle(title) {
    this.$title.innerHTML = '';

    if (this.options.icon) {
      dom.append(this.$icon, this.$title);
      classes$1.addClass(this.getClass(this.classes.ICONTITLE), this.$title);
    }

    dom.append(title, this.$title);
  }

  setContent(content) {
    if (is.isElement(content)) {
      dom.append(content, this.$content);
    } else if (this.options.html) {
      this.$content.innerHTML = content;
    } else {
      this.$content.textContent = content;
    }
  }

  setButtons(buttons) {
    this.$buttons.innerHTML = '';

    for (var button in buttons) {
      if (buttons[button].action) {
        var btn = this.createBtn(buttons[button]);
        dom.append(btn, this.$buttons);
      }
    }
  }

  createBtn(button) {
    var classes = button.classes;
    var action = button.action;
    var label = '';
    var local = ['Yes', 'Cancel'];

    if (local.includes(button.label)) {
      label = this.translate(button.label);
    } else {
      label = button.label;
    }

    var btn = templateEngine.render(this.options.templates.button.call(this), {
      classes: this.classes,
      custom: classes,
      label,
      action
    });
    return dom.parseHTML(btn);
  }

  destroy() {
    if (this.is('initialized')) {
      this.leave('initialized');
    }

    this.trigger(events.DESTROY);
    dom.remove(this.$element);
    super.destroy();
  }

  static open() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var instance = new Modal(options);
    instance.open();
    return instance;
  }

  static init() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var o = utils.deepMerge(options);
    var instance = new Modal(o);
    instance.enter('hide');
    return instance;
  }

  static close(id) {
    var instances = this.getInstances();
    instances.forEach(instance => {
      if (instance.instanceId === id) {
        instance.close();
      }
    });
  }

  static confirm() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (!is.isString(args[0])) {
      return false;
    }

    var opt = utils.deepMerge(defaults, {
      title: '',
      content: '',
      closeable: true,
      buttons: [{
        action: 'cancel',
        label: 'Cancel',
        classes: 'pj-btn pj-btn-outline',
        fn: ''
      }, {
        action: 'yes',
        label: 'Yes',
        classes: 'pj-btn pj-btn-primary',
        fn: ''
      }]
    });
    var str = [];
    var func = [];
    var length = args.length;

    if (length && is.isObject(args[length - 1])) {
      if (args[length - 1].buttons) {
        args[length - 1].buttons.forEach(button => {
          opt.buttons.forEach(btn => {
            if (button.action === btn.action) {
              btn.label = button.label;
              btn.classes = button.classes;
            }
          });
        });
        delete args[length - 1].buttons;
      }

      opt = utils.deepMerge(opt, args[length - 1]);
      length -= 1;
    }

    for (var i = 0; i < length; i++) {
      if (typeof args[i] === 'string') {
        str.push(args[i]);
      } else if (is.isFunction(args[i])) {
        func.push(args[i]);
      }
    }

    if (str.length === 1) {
      opt.content = str[0];
    } else if (str.length > 1) {
      opt.title = str[0];
      opt.content = str[1];
    }

    if (func.length === 1) {
      opt.buttons.forEach(button => {
        if (button.action === 'yes') {
          button.fn = func[0];
        }
      });
    } else if (func.length > 1) {
      opt.buttons.forEach(button => {
        if (button.action === 'yes') {
          button.fn = func[0];
        }

        if (button.action === 'cancel') {
          button.fn = func[1];
        }
      });
    }

    var instance = new Modal(opt);
    instance.open();
    return instance;
  }

  static alert() {
    if (!is.isString(arguments.length <= 0 ? undefined : arguments[0])) {
      return false;
    }

    var opt = utils.deepMerge(defaults, {
      title: '',
      content: '',
      closeable: true
    });
    var length = arguments.length;

    if (length && is.isObject(length - 1 < 0 || arguments.length <= length - 1 ? undefined : arguments[length - 1])) {
      opt = utils.deepMerge(opt, length - 1 < 0 || arguments.length <= length - 1 ? undefined : arguments[length - 1]);
      length -= 1;
    }

    if (length === 1) {
      opt.content = arguments.length <= 0 ? undefined : arguments[0];
    } else if (length === 2) {
      opt.title = arguments.length <= 0 ? undefined : arguments[0];
      opt.content = arguments.length <= 1 ? undefined : arguments[1];
    }

    var instance = new Modal(opt);
    instance.open();
    return instance;
  }

  static closeTop() {
    var instances = this.getInstances();
    var length = instances.length;

    if (!length) {
      return false;
    }

    instances[length - 1].close();
    return true;
  }

  static closeAll() {
    var instances = this.getInstances();
    instances.forEach(instance => {
      instance.close();
    });
    return true;
  }

  static getAll() {
    return this.getInstances();
  }

  static getById(id) {
    var instances = this.getInstances();
    var match = null;
    instances.forEach(instance => {
      if (instance.instanceId === id) {
        match = instance;
      }
    });
    return match;
  }

}) || _class) || _class) || _class) || _class) || _class) || _class) || _class);

module.exports = Modal;
