/*!
 * @pluginjs/events v0.7.16 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@pluginjs/is'), require('@pluginjs/utils'), require('@pluginjs/emitter')) :
  typeof define === 'function' && define.amd ? define(['exports', '@pluginjs/is', '@pluginjs/utils', '@pluginjs/emitter'], factory) :
  (global = global || self, factory(global['@pluginjs/events'] = {}, global['@pluginjs/is'], global['@pluginjs/utils'], global['@pluginjs/emitter']));
}(this, function (exports, is, utils, Emitter) { 'use strict';

  Emitter = Emitter && Emitter.hasOwnProperty('default') ? Emitter['default'] : Emitter;

  function _typeof(obj) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  var EventEmitter =
  /*#__PURE__*/
  function (_Emitter) {
    _inherits(EventEmitter, _Emitter);

    function EventEmitter(element) {
      var _this;

      _classCallCheck(this, EventEmitter);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(EventEmitter).call(this));
      _this.element = element;
      _this.element._eventEmitter = _assertThisInitialized(_this);
      return _this;
    }

    _createClass(EventEmitter, null, [{
      key: "getEventEmitter",
      value: function getEventEmitter(element) {
        if (!element._eventEmitter) {
          element._eventEmitter = new this(element);
        }

        return element._eventEmitter;
      }
    }]);

    return EventEmitter;
  }(Emitter);

  var supportEventListener = function supportEventListener(element) {
    return _typeof(element) === 'object' && 'addEventListener' in element;
  };

  var trigger = function trigger(event) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var element = args[args.length - 1];

    if (!supportEventListener(element)) {
      return;
    }

    if (event instanceof window.Event) {
      element.dispatchEvent(event);
      return;
    }

    var data = args.length > 1 ? args.slice(0, args.length - 1) : null;

    var _EventEmitter$parseEv = EventEmitter.parseEvent(event),
        eventName = _EventEmitter$parseEv.eventName,
        namespace = _EventEmitter$parseEv.namespace;

    var cusEvent = new CustomEvent(eventName, {
      cancelable: true,
      bubbles: true,
      detail: data
    });

    if (namespace) {
      cusEvent.namespace = namespace;
    }

    element.dispatchEvent(cusEvent);
  };

  var getDelegator = function getDelegator(event, selector, callback, element) {
    return function (e, args) {
      var target = e.target;
      var currentTarget = e.currentTarget || element;
      var applyArgs = args ? [e].concat(args) : [e];
      var result;

      if (is.isString(selector)) {
        while (target && target !== currentTarget) {
          if (target.matches(selector)) {
            result = callback.apply(target, applyArgs);
          }

          target = target.parentNode;
        }
      } else {
        result = callback.apply(currentTarget, applyArgs);
      }

      if (result === false) {
        e.preventDefault();
        e.stopPropagation();
      }
    };
  };

  var dispatch = function dispatch(e) {
    var eventName = typeof e.namespace === 'undefined' ? e.type : "".concat(e.type, ".").concat(e.namespace);
    var emitter = EventEmitter.getEventEmitter(e.currentTarget);

    if (e.detail) {
      emitter.emit(eventName, e, e.detail);
    } else {
      emitter.emit(eventName, e);
    }
  };

  var bind = function bind(event, selector, callback, element, once) {
    var emitter = EventEmitter.getEventEmitter(element);

    var _EventEmitter$parseEv2 = EventEmitter.parseEvent(event),
        eventName = _EventEmitter$parseEv2.eventName;

    if (!emitter.hasListeners(event)) {
      element.addEventListener(eventName, dispatch, false);
    }

    var delegator = getDelegator(event, selector, callback, element);
    callback._delegator = delegator;

    if (once) {
      emitter.once(event, delegator);
    } else {
      emitter.on(event, delegator);
    }
  };

  var removeEvent = utils.curryWith(function (events, selector, callback, element) {
    var eventArr = events.split(' ');

    if (eventArr.length > 1) {
      eventArr.forEach(function (e) {
        removeEvent(e, selector, callback, element);
      });
    } else {
      if (!is.isString(selector) && !is.isFunction(callback)) {
        element = callback;
        callback = selector;
        selector = undefined;
      }

      if (!is.isFunction(callback)) {
        element = callback;
        callback = undefined;
      }

      var event = events;
      var emitter = EventEmitter.getEventEmitter(element);

      var _EventEmitter$parseEv3 = EventEmitter.parseEvent(event),
          eventName = _EventEmitter$parseEv3.eventName;

      if (emitter.hasListeners(event)) {
        if (emitter.getListeners(event).length === 0) {
          element.removeEventListener(eventName, dispatch);
        }

        if (typeof callback === 'undefined') {
          emitter.off(event);
        } else {
          emitter.off(event, callback._delegator);
        }
      }
    }

    return element;
  }, supportEventListener);
  var bindEvent = utils.curryWith(function (events, selector, callback, element) {
    var eventArr = events.split(' ');
    var selectorArr = is.isString(selector) ? selector.split(',') : null;

    switch (true) {
      case Boolean(eventArr.length > 1):
        {
          eventArr.forEach(function (e) {
            bindEvent(e, selector, callback, element);
          });
          break;
        }

      case Boolean(selectorArr && selectorArr.length > 1):
        {
          selectorArr.forEach(function (s) {
            bindEvent(events, s.trim(), callback, element);
          });
          break;
        }

      default:
        {
          if (!is.isString(selector) && !is.isFunction(callback)) {
            element = callback;
            callback = selector;
            selector = undefined;
          }

          bind(events, selector, callback, element);
          break;
        }
    }

    return element;
  }, supportEventListener);
  var bindEventOnce = utils.curryWith(function (events, selector, callback, element) {
    var eventArr = events.split(' ');
    var selectorArr = is.isString(selector) ? selector.split(',') : null;

    switch (true) {
      case Boolean(eventArr.length > 1):
        {
          eventArr.forEach(function (e) {
            bindEventOnce(e, selector, callback, element);
          });
          break;
        }

      case Boolean(selectorArr && selectorArr.length > 1):
        {
          selectorArr.forEach(function (s) {
            bindEventOnce(events, s.trim(), callback, element);
          });
          break;
        }

      default:
        {
          if (!is.isString(selector) && !is.isFunction(callback)) {
            element = callback;
            callback = selector;
            selector = undefined;
          }

          var recursiveFunction = function recursiveFunction(e) {
            removeEvent(eventArr[0], selector, recursiveFunction, element);
            return callback(e);
          };

          bind(eventArr[0], selector, recursiveFunction, element, true);
          break;
        }
    }

    return element;
  }, supportEventListener);
  var on = bindEvent;
  var off = removeEvent;
  var once = bindEventOnce;
  var getEventEmitter = function getEventEmitter(element) {
    return EventEmitter.getEventEmitter(element);
  };

  exports.bindEvent = bindEvent;
  exports.bindEventOnce = bindEventOnce;
  exports.getEventEmitter = getEventEmitter;
  exports.off = off;
  exports.on = on;
  exports.once = once;
  exports.removeEvent = removeEvent;
  exports.trigger = trigger;

  Object.defineProperty(exports, '__esModule', { value: true });

}));
