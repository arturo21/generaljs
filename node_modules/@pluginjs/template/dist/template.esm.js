/*!
 * @pluginjs/template v0.7.16 (https://pluginjs.com)
 * Copyright 2019 Creation Studio Limited
 * Released under the GPL-3.0 License.
 */
import { getValueByPath } from '@pluginjs/utils';

/* Credit to https://github.com/Matt-Esch/string-template MIT */

var pattern = /\{\s*([.0-9a-zA-Z_]+)\s*\}/g;

function render(string) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (args.length === 1 && typeof args[0] === 'object') {
    args = args[0];
  }

  if (!args || !args.hasOwnProperty) {
    args = {};
  }

  return string.replace(pattern, (match, i, index) => {
    var result = null;

    if (string[index - 1] === '{' && string[index + match.length] === '}') {
      return i;
    }

    if (Object.prototype.hasOwnProperty.call(args, i)) {
      result = args[i];
    } else if (i.indexOf('.') !== -1) {
      result = getValueByPath(args, i);
    }

    if (result === null || typeof result === 'undefined') {
      return '';
    }

    return result;
  });
}

var main = {
  render,

  compile(str) {
    return function () {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return render(str, ...args);
    };
  },

  parse(str) {
    var matches = str.match(pattern);

    if (matches === null) {
      return false;
    }

    var parsed = [];

    for (var i = 0; i < matches.length; i++) {
      if (!matches[i].match(/^\{\{.+\}\}$/g)) {
        parsed.push(matches[i].substring(1, matches[i].length - 1).trim());
      }
    }

    return parsed;
  }

};

export default main;
