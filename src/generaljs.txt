/*
  Copyright (C) 2025 Arturo Vasquez Soluciones Web.
  Todos los derechos reservados.

  La redistribución y uso en formatos fuente y binario están permitidas
  siempre que el aviso de copyright anterior y este párrafo son
  duplicado en todas esas formas y que cualquier documentación,
  materiales de publicidad y otros materiales relacionados con dicha
  distribución y uso reconocen que el software fue desarrollado
  por el Arturo Vasquez Soluciones Web. El nombre de
  Arturo Vasquez Soluciones Web No se puede utilizar para respaldar o promocionar productos derivados
  de este software sin el permiso previo por escrito.
  ESTE SOFTWARE SE PROPORCIONA '' tal cual '' Y SIN EXPRESA O
  Garantías implícitas, incluyendo, sin limitación, los implicados
  GARANTÍAS DE COMERCIALIZACIÓN Y APTITUD PARA UN PROPÓSITO PARTICULAR.
*/
/*Integrado GDOM para el manejo del DOM / eventos / AJAX */
/*Este archivo lo necesita Function SMOOTH SCROLL*/
let cripto=require("./mods/gcrypto.js");
let fetchapi=require("./mods/fetchapi.js");
let ajaxapi=require("./mods/ajaxapi.js");
let ww=require("./mods/webworkers.js");
let ws=require("./mods/websockets.js");
let storage=require("./mods/cookies.js");
let ytapi=require("./mods/ytapi.js");
let bind=require("./mods/databind.js");
let components = require("./mods/components.js");
let gdom = require("./mods/gdom.min.js");
let numapps=0;
let elementactive="html";
let varsint=[{}];
let nameapp="appdata"+numapps;
let scopenom="genrlapp-" + Math.floor(Math.random() * 27);
//CLASE GENERAL - GENRL
const genrl = (function (global) {
  const _logStore = [];
  const watchers = new WeakMap();
  const html = document.documentElement;
  let numapps = 0;
  let nameapp = "appdata" + numapps;
  let scopenom = "genrlapp-" + Math.floor(Math.random() * 27);

  // 🔒 Privadas
  function isFunction(fn) {
    return typeof fn === 'function';
  }
  function isObject(obj) {
    return obj !== null && typeof obj === 'object';
  }
  function isArray(arr) {
    return Array.isArray(arr);
  }
  function escapeHTML(str) {
    return str.replace(/[&<>"']/g, m => ({
      '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;'
    })[m]);
  }
  function getxhr() {
    return window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
  }
  function validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
  }
  function validateURL(url) {
    try {
      new URL(url);
      return true;
    } catch (_) {
      return false;
    }
  }

  // 🔓 API público
  const api = {
    extend_(name, method) {
      if (typeof name === 'string' && isFunction(method)) {
        api[name] = function (...args) {
          const result = method.apply(api, args);
          return result === undefined ? api : result;
        };
      }
      return api;
    },
    fn(name) {
      const method = api[name];
      return isFunction(method) ? method.bind(api) : undefined;
    },
    fn.extend(name, method) {
      if (typeof name === 'string' && isFunction(method)) {
        api[name] = function (...args) {
          const result = method.apply(api, args);
          return result === undefined ? api : result;
        };
      }
      return api;
    },
    init() {
      api.createScope();
      return api;
    },
    createScope() {
      html.setAttribute("id", nameapp);
      html.setAttribute("name", nameapp);
      html.setAttribute("data-scope", scopenom);
      html.setAttribute("data-gapp", scopenom);
      html.classList.add("app-scope", `scope-${scopenom}`);
      numapps++;
      return api;
    },
    setScope(nombre = "general") {
      html.setAttribute("data-scope", nombre);
      html.classList.remove(...Array.from(html.classList).filter(c => c.startsWith("scope-")));
      html.classList.add(`scope-${nombre}`, "app-scope");
      return api;
    },
    getScope() {
      return html.getAttribute("data-scope");
    },
    hasScope(nombre) {
      return api.getScope() === nombre;
    },
    run(fn) {
      if (document.readyState === "complete" || document.readyState === "interactive") {
        if (isFunction(fn)) fn();
      } else {
        document.addEventListener("DOMContentLoaded", () => {
          if (isFunction(fn)) fn();
        });
      }
      return api;
    },
    ready(fn) {
      return api.run(fn);
    },
    docready(fn) {
      return api.run(fn);
    },
    getxhr,
    ajax() {
      return getxhr();
    },
    safeEval(fn) {
      if (isFunction(fn)) {
        try { fn(); } catch (e) { console.error("safeEval error:", e); }
      }
      return api;
    },
    log(msg) {
      console.log(msg);
      return api;
    },
    warn(msg) {
      console.warn(msg);
      return api;
    },
    info(msg) {
      console.info(msg);
      return api;
    },
    error(msg) {
      console.error(msg);
      return api;
    },
    lhref(url) {
      location.href = url;
      return api;
    },
    lreplace(url) {
      location.replace(url);
      return api;
    },
    encodeuri(url) {
      return url.split(" ").join("+");
    },
    base64_encode(str) {
      return btoa(str);
    },
    base64_decode(str) {
      return atob(str);
    },
    utf8_encode(str) {
      return unescape(encodeURIComponent(str));
    },
    utf8_decode(str) {
      return decodeURIComponent(escape(str));
    },
    parseJSON(json) {
      return JSON.parse(json);
    },
    stringifyJSON(obj) {
      return JSON.stringify(obj);
    },
    parseHTML(htmlstr) {
      const tmp = document.implementation.createHTMLDocument();
      tmp.body.innerHTML = htmlstr;
      return tmp.body.children;
    },
    map(arr, cb) {
      if (isArray(arr)) arr.map(cb);
      return api;
    },
    each(obj, cb) {
      if (isObject(obj)) {
        try { obj.forEach(cb); } catch { [obj].forEach(cb); }
      }
      return api;
    },
    slice(arr, start, end, cb) {
      if (isArray(arr)) cb(arr.slice(start, end));
      return api;
    },
    inArray(arr, val) {
      return arr.indexOf(val);
    },
    indexOf(arr, val) {
      return arr.indexOf(val);
    },
    makeArray(pseudo) {
      return [].slice.call(pseudo);
    },
    getKey(e) {
      return e.keyCode || e.charCode;
    },
    getChar(e) {
      return String.fromCharCode(api.getKey(e));
    },
    blockChar(e) {
      const c = api.getChar(e);
      return api.isNumeric(c) ? "Solo letras permitidas" : api;
    },
    bloqNum(e) {
      const c = api.getChar(e);
      return !api.isNumeric(c) ? "Solo números permitidos" : api;
    },
    isNumeric(n) {
      return !isNaN(parseFloat(n)) && isFinite(n);
    },
    trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    },
    validate: {
      email: validateEmail,
      url: validateURL
    },
    sanitize: {
      html: escapeHTML,
      text: str => str.replace(/[^\w\s]/gi, ''),
      json: obj => {
        try { return JSON.parse(JSON.stringify(obj)); } catch { return null; }
      }
    },
    uuid() {
      return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
        (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
      );
    },
    timestamp() {
      return new Date().toISOString();
    },
    now() {
      return Math.floor(Math.abs(performance.now()));
    },
    nowFloat() {
      return performance.now();
    },
    defineReactive(obj, prop, path = [prop]) {
      let value = obj[prop];
      if (value && typeof value === 'object') {
        api.observeDeep(value, path);
      }
      Object.defineProperty(obj, prop, {
        get() {
          return value;
        },
        set(newVal) {
          const oldVal = value;
          value = newVal;
          if (newVal && typeof newVal === 'object') {
            api.observeDeep(newVal, path);
          }
          api.triggerWatchers(obj, path.join('.'), newVal, oldVal);
        },
        configurable: true,
        enumerable: true
      });
    },
    observeDeep(obj, basePath = []) {
      Object.keys(obj).forEach(key => {
        api.defineReactive(obj, key, [...basePath, key]);
      });
    },
    triggerWatchers(obj, fullPath, newVal, oldVal) {
      const map = watchers.get(obj);
      if (!map) return;
      Object.keys(map).forEach(path => {
        if (fullPath.startsWith(path)) {
          map[path].forEach(fn => fn(newVal, oldVal, fullPath));
        }
      });
    },
    watch(obj, path, callback) {
      if (!watchers.has(obj)) {
        watchers.set(obj, {});
      }
      const map = watchers.get(obj);
      if (!map[path]) {
        map[path] = [];
      }
      map[path].push(callback);
      const keys = path.split('.');
      let target = obj;
      for (let i = 0; i < keys.length - 1; i++) {
        target = target[keys[i]];
        if (!target || typeof target !== 'object') return;
      }
      api.defineReactive(target, keys[keys.length - 1], keys);
    },
    unwatch(obj, path) {
      const map = watchers.get(obj);
      if (map && map[path]) {
        delete map[path];
      }
    }
  };

  return api;
})(window);

genrl.init();
genrl.extend({ cripto });
genrl.extend({ ww });
genrl.extend({ ws });
genrl.extend({ storage });
genrl.extend({ fetchapi });
genrl.extend({ ajaxapi });
genrl.extend({ ytapi });
genrl.extend({ components });
genrl.extend({ bind });
genrl.extend({ gdom });
////////PROTOTIPOS//////////
genrl.__proto__.watch_=function(objeto,attrib,callback){
  //funcion Watch
  DOMelement=g.getelem(objeto);
  watch(DOMelement,attrib,callback);
};
genrl.__proto__.unwatch_=function(objeto,attrib,callback){
  //Funcion Unwatch
  DOMelement=g.getelem(objeto);
  unwatch(DOMelement,attrib,callback);
};
genrl.__proto__.ajax=function(){
  let sock;
  sock=genrl.getxhr();
  return sock;
};
genrl.__proto__.isReady=function(){
  if(document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading"){
    return 1;
  }
  else{
    return 0;
  }
}
genrl.__proto__.empty=function(string){
  if(typeof string==='string'){
    if(string==""){
      return;
    }
    else{
      return -1;
    }
  }
  else{
    return -1;
  }
};

genrl.__proto__.getelem=function(id){
  let objeto;
  if(typeof id==='string'){
    objeto=document.querySelector(id);
    if(typeof objeto==='object'){
      return objeto;
    }
  }
};
genrl.__proto__.getelems=function(tag){
  let arrtags=[];
  if(tag!=undefined){
    arrtags=document.querySelectorAll(tag);
    return arrtags;
  }
  else{
    return -1;
  }
};

genrl.__proto__.g=gdom;

if (typeof window !== 'undefined') {
  window.genrl=genrl;
  window.g=genrl.gdom;
}
module.exports=genrl;